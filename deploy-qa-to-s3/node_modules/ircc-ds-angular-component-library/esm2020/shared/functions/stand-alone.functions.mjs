import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
export class StandAloneFunctions {
    constructor(translate) {
        this.translate = translate;
    }
    getErrorAria(formGroup, id, errorMessages) {
        let returnError = '';
        if (formGroup.get(id)?.dirty && formGroup.get(id)?.invalid) {
            errorMessages?.forEach((error) => {
                if (formGroup.get(id)?.errors?.[error.key]) {
                    returnError === ''
                        ? (returnError += this.translate.instant(error.errorLOV))
                        : (returnError += ', ' + this.translate.instant(error.errorLOV));
                }
            });
            returnError += '.';
        }
        return returnError;
    }
    /**
     * When run, returns an IErrorIds object. It generates IDs based on the errorMessages object
     * and which errors are currently in effect, thereby ensuring that the first element is given
     * an id ending in _error0
     * @param formGroup
     * @param id of the parent (input) component
     * @param errorMessages: IErrorPairs[]
     * @returns errorIds: IErrorIDs[]
     */
    getErrorIds(formGroup, id, errorMessages) {
        let errorIds = [];
        errorMessages?.forEach((message) => {
            errorIds.push({ key: message.key, errorLOV: message.errorLOV });
        });
        //Code block to get errors that have occurred before the statusChange obs is activated
        let i = 0;
        errorIds.forEach((error) => {
            if (formGroup.get(id)?.errors?.[error.key]) {
                error.id = id + '_error' + i;
                i++;
            }
        });
        formGroup.get(id)?.statusChanges.subscribe((change) => {
            let i = 0;
            errorIds.forEach((error) => {
                if (formGroup.get(id)?.errors?.[error.key]) {
                    error.id = id + '_error' + i;
                    i++;
                }
            });
        });
        return errorIds;
    }
    /**
     * Given a form group & form control id, set errors & mark as touch on specific form controls
     * @param formGroup
     * @param formID ID of form control
     * @param errorKeys
     */
    setFormErrors(formGroup, formID, errorKeys) {
        const errorVals = {};
        if (errorKeys.length === 0) {
            formGroup.get(formID)?.setErrors(null);
        }
        else {
            errorKeys.forEach((error) => {
                errorVals[error] = true;
            });
            formGroup.get(formID)?.setErrors(errorVals);
            formGroup.get(formID)?.markAsTouched();
        }
    }
    /**
     * Create a label config - for use inside form input components
     * @param formGroup
     * @param id
     * @param parentID
     * @param errorMessages
     * @param label
     * @param desc
     * @param hint
     * @param required
     */
    makeLabelConfig(formGroup, parentID, errorMessages, label, desc, hint, required, iconButton, topLabel) {
        const config = {
            formGroup: formGroup,
            parentID: parentID,
            errorMessages: errorMessages,
            label: label,
            desc: desc,
            hint: hint,
            required: required,
            iconButton: iconButton,
            topLabel: topLabel
        };
        return config;
    }
    /**
     * A function designed to deal with how AWFUL Safari is. Safari does not consider touched to be a valid state in <body>,
     * therefore this is needed to force it to acknowledge the state.
     * @param formGroup
     * @param id of the parent (input) component
     */
    wasTouched(formGroup, id) {
        formGroup.get(id)?.markAsTouched();
    }
    /**
     * Get the current base url.
     * @param baseUrl
     * @param baseUrlKey Translation key of base url
     */
    getBaseUrl(baseUrl = '', baseUrlKey) {
        const curLang = this.translate.currentLang;
        const langKey = curLang === 'en-US' || curLang === 'en' ? 'en' : 'fr';
        let i = window.location.href.slice(window.location.href.indexOf(langKey), window.location.href.length);
        i = i.split('/');
        let index = 0;
        for (const j of i) {
            if (j === this.translate.instant(baseUrlKey ?? '')) {
                baseUrl += '/' + j;
                // Should halt when find the base url segment
                break;
            }
            else if (index !== i.length - 1) {
                baseUrl += '/' + j;
                index += 1;
            }
        }
        if (baseUrl[baseUrl.length] !== '/')
            baseUrl += '/';
        return baseUrl;
    }
}
StandAloneFunctions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StandAloneFunctions, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });
StandAloneFunctions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StandAloneFunctions, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StandAloneFunctions, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,