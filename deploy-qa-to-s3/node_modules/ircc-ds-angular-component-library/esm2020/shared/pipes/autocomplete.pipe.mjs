import { Pipe, SecurityContext } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class autocompletePipe {
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
    }
    transform(value, searched = '') {
        if (searched.length === 0) {
            return this.sanitize(`${value}`);
        }
        return this.sanitize(`<span class="bolded">${this.replace(value, searched)}</span>`);
    }
    replace(str, searched) {
        return str.replace(new RegExp(`(${searched})`, 'i'), '<span class="normal">$1</span>');
    }
    sanitize(str) {
        return this.domSanitizer.sanitize(SecurityContext.HTML, str);
    }
}
autocompletePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: autocompletePipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
autocompletePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: autocompletePipe, name: "autocomplete" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: autocompletePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'autocomplete' }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9zaGFyZWQvcGlwZXMvYXV0b2NvbXBsZXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFJckUsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFvQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7SUFFbEQsU0FBUyxDQUFDLEtBQWEsRUFBRSxXQUFtQixFQUFFO1FBQzVDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNsQztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FDbEIsd0JBQXdCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQy9ELENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxRQUFnQjtRQUNuQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQ2hCLElBQUksTUFBTSxDQUFDLElBQUksUUFBUSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ2hDLGdDQUFnQyxDQUNqQyxDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs4R0FyQlUsZ0JBQWdCOzRHQUFoQixnQkFBZ0I7NEZBQWhCLGdCQUFnQjtrQkFENUIsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBTZWN1cml0eUNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AUGlwZSh7IG5hbWU6ICdhdXRvY29tcGxldGUnIH0pXG5leHBvcnQgY2xhc3MgYXV0b2NvbXBsZXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nLCBzZWFyY2hlZDogc3RyaW5nID0gJycpOiBhbnkge1xuICAgIGlmIChzZWFyY2hlZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNhbml0aXplKGAke3ZhbHVlfWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZShcbiAgICAgIGA8c3BhbiBjbGFzcz1cImJvbGRlZFwiPiR7dGhpcy5yZXBsYWNlKHZhbHVlLCBzZWFyY2hlZCl9PC9zcGFuPmBcbiAgICApO1xuICB9XG5cbiAgcmVwbGFjZShzdHI6IHN0cmluZywgc2VhcmNoZWQ6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShcbiAgICAgIG5ldyBSZWdFeHAoYCgke3NlYXJjaGVkfSlgLCAnaScpLFxuICAgICAgJzxzcGFuIGNsYXNzPVwibm9ybWFsXCI+JDE8L3NwYW4+J1xuICAgICk7XG4gIH1cblxuICBzYW5pdGl6ZShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuSFRNTCwgc3RyKTtcbiAgfVxufVxuIl19