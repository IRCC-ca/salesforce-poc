import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Language Switch Button renamed and refactored to include Header and Footer Dark Mode support based on user system preferences
 */
export class LanguageHeaderFooterSwitchService {
    constructor() {
        this.languageClickSub = new BehaviorSubject(false);
        this.languageClickObs$ = this.languageClickSub.asObservable();
        this.isDarkModeSubject = new BehaviorSubject(false);
        this.isDarkMode$ = this.isDarkModeSubject.asObservable();
        this.updateDarkModePreference();
    }
    /**
   * We check system preference for preferred color scheme in the constructor before components are rendered in the DOM and subscribe to changes in the header and footer components
   */
    updateDarkModePreference() {
        const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const darkModeListener = (event) => {
            this.isDarkModeSubject.next(event.matches);
        };
        darkModeQuery.addEventListener('change', darkModeListener);
        this.isDarkModeSubject.next(darkModeQuery.matches);
    }
    languageToggleClick() {
        this.languageClickSub.next(true);
    }
}
LanguageHeaderFooterSwitchService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: LanguageHeaderFooterSwitchService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LanguageHeaderFooterSwitchService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: LanguageHeaderFooterSwitchService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: LanguageHeaderFooterSwitchService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2UtaGVhZGVyLWZvb3Rlci1zd2l0Y2guc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1saWIvc3JjL2xpYi9oZWFkZXItZm9vdGVyL2xhbmd1YWdlLXN3aXRjaC9sYW5ndWFnZS1oZWFkZXItZm9vdGVyLXN3aXRjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFNckM7O0dBRUc7QUFDTCxNQUFNLE9BQU8saUNBQWlDO0lBTTVDO1FBTFEscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDL0Qsc0JBQWlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pELHNCQUFpQixHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBQ3pELGdCQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBR3pELElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFDQzs7S0FFQztJQUNILHdCQUF3QjtRQUN0QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFFeEUsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQTBCLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUM7UUFFRixhQUFhLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7OytIQXpCVSxpQ0FBaUM7bUlBQWpDLGlDQUFpQyxjQU5oQyxNQUFNOzRGQU1QLGlDQUFpQztrQkFQN0MsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbiAgLyoqXG4gICAqIExhbmd1YWdlIFN3aXRjaCBCdXR0b24gcmVuYW1lZCBhbmQgcmVmYWN0b3JlZCB0byBpbmNsdWRlIEhlYWRlciBhbmQgRm9vdGVyIERhcmsgTW9kZSBzdXBwb3J0IGJhc2VkIG9uIHVzZXIgc3lzdGVtIHByZWZlcmVuY2VzXG4gICAqL1xuZXhwb3J0IGNsYXNzIExhbmd1YWdlSGVhZGVyRm9vdGVyU3dpdGNoU2VydmljZSB7XG4gIHByaXZhdGUgbGFuZ3VhZ2VDbGlja1N1YiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICBsYW5ndWFnZUNsaWNrT2JzJCA9IHRoaXMubGFuZ3VhZ2VDbGlja1N1Yi5hc09ic2VydmFibGUoKTtcbiAgcHJpdmF0ZSBpc0RhcmtNb2RlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICBwdWJsaWMgaXNEYXJrTW9kZSQgPSB0aGlzLmlzRGFya01vZGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXBkYXRlRGFya01vZGVQcmVmZXJlbmNlKCk7XG4gIH1cbiAgICAvKipcbiAgICogV2UgY2hlY2sgc3lzdGVtIHByZWZlcmVuY2UgZm9yIHByZWZlcnJlZCBjb2xvciBzY2hlbWUgaW4gdGhlIGNvbnN0cnVjdG9yIGJlZm9yZSBjb21wb25lbnRzIGFyZSByZW5kZXJlZCBpbiB0aGUgRE9NIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcyBpbiB0aGUgaGVhZGVyIGFuZCBmb290ZXIgY29tcG9uZW50c1xuICAgKi9cbiAgdXBkYXRlRGFya01vZGVQcmVmZXJlbmNlKCkge1xuICAgIGNvbnN0IGRhcmtNb2RlUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpO1xuICAgIFxuICAgIGNvbnN0IGRhcmtNb2RlTGlzdGVuZXIgPSAoZXZlbnQ6IE1lZGlhUXVlcnlMaXN0RXZlbnQpID0+IHtcbiAgICAgIHRoaXMuaXNEYXJrTW9kZVN1YmplY3QubmV4dChldmVudC5tYXRjaGVzKTtcbiAgICB9O1xuXG4gICAgZGFya01vZGVRdWVyeS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBkYXJrTW9kZUxpc3RlbmVyKTtcbiAgICB0aGlzLmlzRGFya01vZGVTdWJqZWN0Lm5leHQoZGFya01vZGVRdWVyeS5tYXRjaGVzKTtcbiAgfVxuXG4gIGxhbmd1YWdlVG9nZ2xlQ2xpY2soKSB7XG4gICAgdGhpcy5sYW5ndWFnZUNsaWNrU3ViLm5leHQodHJ1ZSk7XG4gIH1cbn1cbiJdfQ==