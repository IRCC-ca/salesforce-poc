import { isPlatformBrowser } from '@angular/common';
import { Component, HostListener, Inject, Input, PLATFORM_ID } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./language-header-footer-switch.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/router";
export const LANGUAGE_SWITCH_TEXT_ENGLISH = 'Français';
export const LANGUAGE_SWITCH_TEXT_ENGLISH_MOBILE = '<abbr title="Français">FR</abbr>';
export const LANGUAGE_SWITCH_TEXT_FRENCH = 'English';
export const LANGUAGE_SWITCH_TEXT_FRENCH_MOBILE = '<abbr title="English">EN</abbr>';
export class LanguageSwitchComponent {
    constructor(platformId, langToggle, translate, router, titleService) {
        this.platformId = platformId;
        this.langToggle = langToggle;
        this.translate = translate;
        this.router = router;
        this.titleService = titleService;
        this.id = '';
        this.isMobile = false;
        this.text = '';
        this.aria = '';
        this.isMobile = window.innerWidth <= 360; //phone breakpoint
    }
    /** Listens for screen resizes and sets mobile boolean */
    handleResize(e) {
        if (isPlatformBrowser(this.platformId)) {
            this.isMobile = window.innerWidth <= 768; //tablet breakpoint
            this.setText(this.translate.currentLang);
        }
    }
    ngOnInit() {
        let lang = this.translate.currentLang;
        this.setText(lang);
        this.translate.onLangChange.subscribe((newLang) => {
            console.log(newLang.lang, 'switch');
            this.setText(newLang.lang);
        });
    }
    switch() {
        this.langToggle.languageToggleClick();
        this.titleService.updateTitle(this.router.routerState.snapshot);
    }
    setText(lang) {
        if (lang === 'en' || lang === 'en-US') {
            this.isMobile
                ? (this.text = LANGUAGE_SWITCH_TEXT_ENGLISH_MOBILE)
                : (this.text = LANGUAGE_SWITCH_TEXT_ENGLISH);
        }
        else {
            this.isMobile
                ? (this.text = LANGUAGE_SWITCH_TEXT_FRENCH_MOBILE)
                : (this.text = LANGUAGE_SWITCH_TEXT_FRENCH);
        }
    }
}
LanguageSwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: LanguageSwitchComponent, deps: [{ token: PLATFORM_ID }, { token: i1.LanguageHeaderFooterSwitchService }, { token: i2.TranslateService }, { token: i3.Router }, { token: i3.TitleStrategy }], target: i0.ɵɵFactoryTarget.Component });
LanguageSwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: LanguageSwitchComponent, selector: "ircc-cl-lib-language-switch", inputs: { id: "id" }, host: { listeners: { "window:resize": "handleResize($event)" } }, ngImport: i0, template: "<a\n  [id]=\"id\"\n  (click)=\"switch()\"\n  id=\"language-toggle\"\n  [innerHTML]=\"text\"\n  tabindex=\"0\"\n></a>\n", preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: LanguageSwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-language-switch', template: "<a\n  [id]=\"id\"\n  (click)=\"switch()\"\n  id=\"language-toggle\"\n  [innerHTML]=\"text\"\n  tabindex=\"0\"\n></a>\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i1.LanguageHeaderFooterSwitchService }, { type: i2.TranslateService }, { type: i3.Router }, { type: i3.TitleStrategy }]; }, propDecorators: { id: [{
                type: Input
            }], handleResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1saWIvc3JjL2xpYi9oZWFkZXItZm9vdGVyL2xhbmd1YWdlLXN3aXRjaC9sYW5ndWFnZS1zd2l0Y2guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50LWxpYi9zcmMvbGliL2hlYWRlci1mb290ZXIvbGFuZ3VhZ2Utc3dpdGNoL2xhbmd1YWdlLXN3aXRjaC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFNdkIsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsVUFBVSxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUFHLGtDQUFrQyxDQUFDO0FBRXRGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLFNBQVMsQ0FBQztBQUNyRCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRyxpQ0FBaUMsQ0FBQztBQU1wRixNQUFNLE9BQU8sdUJBQXVCO0lBUWxDLFlBQytCLFVBQWtCLEVBQ3ZDLFVBQTZDLEVBQzdDLFNBQTJCLEVBQzNCLE1BQWMsRUFDZCxZQUEyQjtRQUpOLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDdkMsZUFBVSxHQUFWLFVBQVUsQ0FBbUM7UUFDN0MsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGlCQUFZLEdBQVosWUFBWSxDQUFlO1FBWjVCLE9BQUUsR0FBRyxFQUFFLENBQUM7UUFFakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQVVSLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxrQkFBa0I7SUFDOUQsQ0FBQztJQUVELHlEQUF5RDtJQUV6RCxZQUFZLENBQUMsQ0FBTTtRQUNqQixJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUMsbUJBQW1CO1lBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVk7UUFDbEIsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVE7Z0JBQ1gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxtQ0FBbUMsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyw0QkFBNEIsQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUTtnQkFDWCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLGtDQUFrQyxDQUFDO2dCQUNsRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUEyQixDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDOztxSEFwRFUsdUJBQXVCLGtCQVN4QixXQUFXO3lHQVRWLHVCQUF1QiwySkN4QnBDLHdIQU9BOzRGRGlCYSx1QkFBdUI7a0JBSm5DLFNBQVM7K0JBQ0UsNkJBQTZCOzswQkFZcEMsTUFBTTsyQkFBQyxXQUFXOzRLQVJaLEVBQUU7c0JBQVYsS0FBSztnQkFvQk4sWUFBWTtzQkFEWCxZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFBMQVRGT1JNX0lEXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBUaXRsZVN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IExhbmd1YWdlSGVhZGVyRm9vdGVyU3dpdGNoU2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZ2UtaGVhZGVyLWZvb3Rlci1zd2l0Y2guc2VydmljZSc7XG5cblxuZXhwb3J0IGNvbnN0IExBTkdVQUdFX1NXSVRDSF9URVhUX0VOR0xJU0ggPSAnRnJhbsOnYWlzJztcbmV4cG9ydCBjb25zdCBMQU5HVUFHRV9TV0lUQ0hfVEVYVF9FTkdMSVNIX01PQklMRSA9ICc8YWJiciB0aXRsZT1cIkZyYW7Dp2Fpc1wiPkZSPC9hYmJyPic7XG5cbmV4cG9ydCBjb25zdCBMQU5HVUFHRV9TV0lUQ0hfVEVYVF9GUkVOQ0ggPSAnRW5nbGlzaCc7XG5leHBvcnQgY29uc3QgTEFOR1VBR0VfU1dJVENIX1RFWFRfRlJFTkNIX01PQklMRSA9ICc8YWJiciB0aXRsZT1cIkVuZ2xpc2hcIj5FTjwvYWJicj4nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpcmNjLWNsLWxpYi1sYW5ndWFnZS1zd2l0Y2gnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGFuZ3VhZ2Utc3dpdGNoLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBMYW5ndWFnZVN3aXRjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGlkID0gJyc7XG5cbiAgaXNNb2JpbGUgPSBmYWxzZTtcblxuICB0ZXh0ID0gJyc7XG4gIGFyaWEgPSAnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IG9iamVjdCxcbiAgICBwcml2YXRlIGxhbmdUb2dnbGU6IExhbmd1YWdlSGVhZGVyRm9vdGVyU3dpdGNoU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgdGl0bGVTZXJ2aWNlOiBUaXRsZVN0cmF0ZWd5XG5cbiAgKSB7XG4gICAgdGhpcy5pc01vYmlsZSA9IHdpbmRvdy5pbm5lcldpZHRoIDw9IDM2MDsgLy9waG9uZSBicmVha3BvaW50XG4gIH1cblxuICAvKiogTGlzdGVucyBmb3Igc2NyZWVuIHJlc2l6ZXMgYW5kIHNldHMgbW9iaWxlIGJvb2xlYW4gKi9cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50J10pXG4gIGhhbmRsZVJlc2l6ZShlOiBhbnkpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5pc01vYmlsZSA9IHdpbmRvdy5pbm5lcldpZHRoIDw9IDc2ODsgLy90YWJsZXQgYnJlYWtwb2ludFxuICAgICAgdGhpcy5zZXRUZXh0KHRoaXMudHJhbnNsYXRlLmN1cnJlbnRMYW5nKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBsZXQgbGFuZyA9IHRoaXMudHJhbnNsYXRlLmN1cnJlbnRMYW5nO1xuICAgIHRoaXMuc2V0VGV4dChsYW5nKTtcbiAgICB0aGlzLnRyYW5zbGF0ZS5vbkxhbmdDaGFuZ2Uuc3Vic2NyaWJlKChuZXdMYW5nKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhuZXdMYW5nLmxhbmcsICdzd2l0Y2gnKTtcbiAgICAgIHRoaXMuc2V0VGV4dChuZXdMYW5nLmxhbmcpO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoKCkge1xuICAgIHRoaXMubGFuZ1RvZ2dsZS5sYW5ndWFnZVRvZ2dsZUNsaWNrKCk7XG4gICAgdGhpcy50aXRsZVNlcnZpY2UudXBkYXRlVGl0bGUodGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QpO1xuICB9XG5cbiAgc2V0VGV4dChsYW5nOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZyA9PT0gJ2VuJyB8fCBsYW5nID09PSAnZW4tVVMnKSB7XG4gICAgICB0aGlzLmlzTW9iaWxlXG4gICAgICAgID8gKHRoaXMudGV4dCA9IExBTkdVQUdFX1NXSVRDSF9URVhUX0VOR0xJU0hfTU9CSUxFKVxuICAgICAgICA6ICh0aGlzLnRleHQgPSBMQU5HVUFHRV9TV0lUQ0hfVEVYVF9FTkdMSVNIKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc01vYmlsZVxuICAgICAgICA/ICh0aGlzLnRleHQgPSBMQU5HVUFHRV9TV0lUQ0hfVEVYVF9GUkVOQ0hfTU9CSUxFKVxuICAgICAgICA6ICh0aGlzLnRleHQgPSBMQU5HVUFHRV9TV0lUQ0hfVEVYVF9GUkVOQ0gpO1xuICAgIH1cbiAgfVxufVxuIiwiPGFcbiAgW2lkXT1cImlkXCJcbiAgKGNsaWNrKT1cInN3aXRjaCgpXCJcbiAgaWQ9XCJsYW5ndWFnZS10b2dnbGVcIlxuICBbaW5uZXJIVE1MXT1cInRleHRcIlxuICB0YWJpbmRleD1cIjBcIlxuPjwvYT5cbiJdfQ==