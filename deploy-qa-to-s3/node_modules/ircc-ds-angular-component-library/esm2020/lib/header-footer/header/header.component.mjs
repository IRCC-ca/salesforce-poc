import { Component, Input } from '@angular/core';
import { GOV_CANADA_LOGOS } from '../header-footer-const.component';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../language-switch/language-header-footer-switch.service";
import * as i3 from "@angular/common";
import * as i4 from "../language-switch/language-switch.component";
import * as i5 from "../theme-switch/theme-switch.component";
export const HEADER_IMG_LINK_EN = 'https://www.canada.ca/en.html';
export const HEADER_IMG_LINK_FR = 'https://www.canada.ca/fr.html';
export const CANADA_LOGO_ARIA_LABEL_ENGLISH = 'Symbol of the Government of Canada';
export const CANADA_LOGO_ARIA_LABEL_FRENCH = 'Symbole du gouvernement du Canada';
export class HeaderComponent {
    constructor(translate, languageHeaderFooterSwitch) {
        this.translate = translate;
        this.languageHeaderFooterSwitch = languageHeaderFooterSwitch;
        /**
         * This is the ID of the header component. Will be applied as the ID of the header Element within the custom element.
         *
         * All IDs must be unique and can be used to specifically target an element within your project.
         */
        this.id = '';
        this.themeToggle = false;
        this.alt = '';
        this.govCanadaLink = '';
        this.logo = '';
        this.isDarkMode = false;
        this.subscription = this.languageHeaderFooterSwitch.isDarkMode$.subscribe((response) => {
            this.updateHeaderImage(response);
            this.isDarkMode = response;
        });
    }
    /**
     * ngOnInit() lifecycle method run immediately when the component is initialized. c
     *
     * For Header Component the ngOnInit() checks for current url Language and subscribes to changes. Appropriate translations will be pulled as a result and content will be displayed in the users selected language.
     * When language changes update the Header and Footer images to display logos based on language and preferred color scheme based on the dark mode subscription in the constructor
     */
    ngOnInit() {
        this.setLang(this.translate.currentLang);
        this.translate.onLangChange.subscribe((change) => {
            this.setLang(change.lang);
            this.updateHeaderImage(this.isDarkMode);
        });
    }
    updateHeaderImage(res) {
        const locale = this.translate.currentLang;
        if (locale === 'en' || locale === 'en-US') {
            this.logo = res
                ? GOV_CANADA_LOGOS.headerDarkLogo
                : GOV_CANADA_LOGOS.headerLightLogo;
        }
        else {
            this.logo = res
                ? GOV_CANADA_LOGOS.headerDarkLogoFrench
                : GOV_CANADA_LOGOS.headerLightLogoFrench;
        }
    }
    /**
     * setLang(lang: string) if a function which accepts a string value.
     * This value currently needs to be 'en' or 'en-US' to trigger English translations otherwise
     * french translations will be triggered.
     */
    setLang(lang) {
        if (lang === 'en' || lang === 'en-US') {
            this.alt = CANADA_LOGO_ARIA_LABEL_ENGLISH;
            this.govCanadaLink = HEADER_IMG_LINK_EN;
        }
        else {
            this.alt = CANADA_LOGO_ARIA_LABEL_FRENCH;
            this.govCanadaLink = HEADER_IMG_LINK_FR;
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
HeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: HeaderComponent, deps: [{ token: i1.TranslateService }, { token: i2.LanguageHeaderFooterSwitchService }], target: i0.ɵɵFactoryTarget.Component });
HeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: HeaderComponent, selector: "ircc-cl-lib-header", inputs: { id: "id", themeToggle: "themeToggle" }, ngImport: i0, template: "<header\n  class=\"heading\"\n  role=\"banner\"\n  [id]=\"id\"\n>\n  <div class=\"header-content\">\n    <div class=\"image-container\">\n      <a\n        href=\"{{ govCanadaLink }}\"\n        id=\"canada-home-img-link\"\n        target=\"_blank\"\n        property=\"url\"\n        role=\"link\"\n        tabindex=\"0\"\n      >\n        <img\n          [src]=\"'data:image/png;base64,' + logo\"\n          alt=\"{{ alt }}\"\n          property=\"logo\"\n        />\n      </a>\n    </div>\n\n    <div class=\"languageSwitch\">\n      <ircc-cl-lib-language-switch\n        [id]=\"id + '_langToggle'\"\n      ></ircc-cl-lib-language-switch>\n      <ircc-cl-lib-theme-switch *ngIf=\"themeToggle\"></ircc-cl-lib-theme-switch>\n    </div>\n  </div>\n  <hr class=\"headerLine\" />\n\n  <ng-content select=\"[headerContent]\"></ng-content>\n</header>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.LanguageSwitchComponent, selector: "ircc-cl-lib-language-switch", inputs: ["id"] }, { kind: "component", type: i5.ThemeSwitchComponent, selector: "ircc-cl-lib-theme-switch" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: HeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-header', template: "<header\n  class=\"heading\"\n  role=\"banner\"\n  [id]=\"id\"\n>\n  <div class=\"header-content\">\n    <div class=\"image-container\">\n      <a\n        href=\"{{ govCanadaLink }}\"\n        id=\"canada-home-img-link\"\n        target=\"_blank\"\n        property=\"url\"\n        role=\"link\"\n        tabindex=\"0\"\n      >\n        <img\n          [src]=\"'data:image/png;base64,' + logo\"\n          alt=\"{{ alt }}\"\n          property=\"logo\"\n        />\n      </a>\n    </div>\n\n    <div class=\"languageSwitch\">\n      <ircc-cl-lib-language-switch\n        [id]=\"id + '_langToggle'\"\n      ></ircc-cl-lib-language-switch>\n      <ircc-cl-lib-theme-switch *ngIf=\"themeToggle\"></ircc-cl-lib-theme-switch>\n    </div>\n  </div>\n  <hr class=\"headerLine\" />\n\n  <ng-content select=\"[headerContent]\"></ng-content>\n</header>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.LanguageHeaderFooterSwitchService }]; }, propDecorators: { id: [{
                type: Input
            }], themeToggle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,