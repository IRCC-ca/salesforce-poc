import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ERROR_TEXT_STUB } from '../../shared/label/label.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/functions/stand-alone.functions";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/icon-button/icon-button.component";
import * as i5 from "../../shared/label/label.component";
import * as i6 from "@angular/forms";
import * as i7 from "../error/error.component";
export var InputTypes;
(function (InputTypes) {
    InputTypes["text"] = "text";
    InputTypes["password"] = "password";
    InputTypes["autocomplete"] = "autocomplete";
})(InputTypes || (InputTypes = {}));
export const ARIA_TEXT = {
    en: {
        btnTypePasswordAriaLabel: 'password eye icon',
        btnTypePasswordShowAriaLabel: 'display password text',
        btnTypePasswordHideAriaLabel: 'mark password text',
        btnTypeAutoCompleteClear: 'clear text'
    },
    fr: {
        btnTypePasswordAriaLabel: "icÃ´ne d'oeil de mot de passe",
        btnTypePasswordShowAriaLabel: 'afficher le texte du mot de passe',
        btnTypePasswordHideAriaLabel: 'mark password text',
        btnTypeAutoCompleteClear: 'Effacer le texte'
    }
};
export class InputComponent {
    constructor(standAloneFunctions, translate, changeDetectorRef, renderer) {
        this.standAloneFunctions = standAloneFunctions;
        this.translate = translate;
        this.changeDetectorRef = changeDetectorRef;
        this.renderer = renderer;
        this.formGroupEmpty = new FormGroup({});
        /**
         * Note: DON'T include default values of '' unless it REALLY makes sense to do so - instead, make them optional.
         * The config input is where you declare the inputs desired properties such as labels, hints, descriptions, etc. where only the id and form group are mandatory properties. Refer to IInputComponentConfig interface.
         */
        this.config = {
            id: '',
            formGroup: new FormGroup({})
        };
        /**
         * The input id is used to identify the component uniquely for subscribing to value changes and errors
         */
        this.id = '';
        /**
         * FormGroup aggregates the values of each child FormControl into one object, with each control name as the key. It calculates its status by reducing the status values of its children. For example, if one of the controls in a group is invalid, the entire group becomes invalid.
         */
        this.formGroup = this.formGroupEmpty;
        /**
         * Type refers to the 2 different input options: basic text or password as the password type has additional configuration
         */
        this.type = InputTypes.password;
        this.focusEvent = new EventEmitter();
        this.disabled = false;
        this.focusState = false;
        this.typeControl = InputTypes.text;
        this.btnAriaLabel = '';
        this.btnAriaLabelHide = '';
        this.btnAriaLabelShow = '';
        this.btnAriaTypeAutoCompleteClear = '';
        this.errorIds = [];
        this.errorAria = '';
        this.labelConfig = {
            formGroup: this.config.formGroup,
            parentID: ''
        };
        this.touched = false;
        this.errorStubText = '';
        this.currentStatus = 'VALID';
        this.buttonAutoCompleteClear = {
            id: `${this.config.id}-button-autocomplete`,
            category: 'custom',
            size: 'extraSmall',
            icon: {
                class: 'fa-solid fa-circle-xmark',
                color: 'var(--neutral-text)'
            }
        };
        this.buttonAutoCompleteClearClicked = false;
        //Removed '!' and added null case in onChange
        this.onTouch = () => {
            if (this.formGroup?.get(this.config.id)?.touched === false) {
                this.formGroup?.get(this.config.id)?.markAsTouched();
            }
        };
        this.onChange = (value) => {
            this.config.formGroup.get(this.config.id)?.setValue(value);
        };
        //set config from individual options, if present
        if (this.formGroup !== this.formGroupEmpty) {
            this.config.formGroup = this.formGroup;
        }
        if (this.id !== '') {
            this.config.id = this.id;
        }
        if (!this.config.type) {
            this.config.type = InputTypes.text;
        }
        else if (this.config.type === InputTypes.password) {
            this.showPassword = false;
            this.typeControl = InputTypes.password;
        }
        if (this.size)
            this.config.size = this.size;
        if (this.label)
            this.config.label = this.label;
        if (this.hint)
            this.config.hint = this.hint;
        if (this.desc)
            this.config.desc = this.desc;
        if (this.required)
            this.config.required = this.required;
        if (this.placeholder)
            this.config.placeholder = this.placeholder;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    /**
     * When the page loads, we initialize the form with it's controls, labels, and config, and detect value changes and errors. setLang detects changes to the language toggle to serve the correct text
     */
    ngOnInit() {
        const retControl = this.config.formGroup.get(this.config.id);
        if (retControl) {
            this.formControl = retControl;
        }
        this.setLang(this.translate.currentLang);
        this.translate.onLangChange.subscribe((change) => {
            this.setLang(change.lang);
        });
        this.type === InputTypes.text
            ? (this.showPassword = false)
            : (this.showPassword = true);
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        //set disable to true when form is disabled
        this.config.formGroup.valueChanges.subscribe((change) => {
            this.disabled = this.config.formGroup.get(this.config.id)
                ?.disabled;
        });
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
        this.currentStatus =
            this.config.formGroup.get(this.config.id)?.status || 'DISABLED';
        switch (this.currentStatus) {
            case 'DISABLED':
                this.setDisabledState(true);
                break;
            default:
                this.setDisabledState(false);
        } //Get the error text when the formControl value changes
        this.config.formGroup
            .get(this.config.id)
            ?.statusChanges.subscribe((change) => {
            this.getAriaErrorText();
            if (change !== this.currentStatus) {
                this.currentStatus = change;
                switch (this.currentStatus) {
                    case 'DISABLED':
                        this.setDisabledState(true);
                        break;
                    default:
                        this.setDisabledState(false);
                }
            }
        });
    }
    /**
     * Get the aria error text for the label
     */
    getAriaErrorText() {
        if (this.config.errorMessages) {
            this.formControl?.markAsDirty();
            this.errorAria = this.standAloneFunctions.getErrorAria(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
    }
    /**
     * Set a boolean representing the touched state to true and trigger getAriaErrorText()
     */
    onTouchedLabel() {
        this.touched = true;
        this.getAriaErrorText();
        setTimeout(() => {
            // Do not emit blur event after clicking clear button
            if (!this.buttonAutoCompleteClearClicked) {
                this.focusEvent.emit(false);
            }
            this.buttonAutoCompleteClearClicked = false;
        }, 100);
    }
    onFocus() {
        if (!this.config.formGroup.get(this.config.id)?.disabled) {
            this.focusEvent.emit(true);
        }
    }
    /**
     * setLang detects changes to the language toggle to serve the correct aria error text
     */
    setLang(lang) {
        this.getAriaErrorText();
        if (lang === 'en' || lang === 'en-US') {
            this.errorStubText = ERROR_TEXT_STUB.en;
            this.btnAriaLabel = ARIA_TEXT.en.btnTypePasswordAriaLabel;
            this.btnAriaLabelHide = ARIA_TEXT.en.btnTypePasswordHideAriaLabel;
            this.btnAriaLabelShow = ARIA_TEXT.en.btnTypePasswordShowAriaLabel;
            this.btnAriaTypeAutoCompleteClear = ARIA_TEXT.en.btnTypeAutoCompleteClear;
        }
        else {
            this.errorStubText = ERROR_TEXT_STUB.fr;
            this.btnAriaLabel = ARIA_TEXT.fr.btnTypePasswordAriaLabel;
            this.btnAriaLabelHide = ARIA_TEXT.fr.btnTypePasswordHideAriaLabel;
            this.btnAriaLabelShow = ARIA_TEXT.fr.btnTypePasswordShowAriaLabel;
            this.btnAriaTypeAutoCompleteClear = ARIA_TEXT.en.btnTypeAutoCompleteClear;
        }
    }
    /**
     * A lifecycle hook that is called when any data-bound property of a directive changes.
     */
    ngOnChanges() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
        else {
            this.errorIds = [];
        }
        if (this.config.type === InputTypes.autocomplete) {
            this.typeControl = InputTypes.text;
        }
        else if (this.config.type) {
            this.typeControl = this.config.type;
        }
        this.showPassword =
            this.config.type === InputTypes.password &&
                this.typeControl === InputTypes.text;
    }
    /**
     * Apply focus state
     */
    focusInput(focusValue) {
        this.focusState = !focusValue;
    }
    /**
     * Toggle the password field
     */
    hideShow() {
        this.showPassword = !this.showPassword;
        if (this.showPassword) {
            this.typeControl = InputTypes.text;
        }
        else {
            this.typeControl = InputTypes.password;
        }
    }
    clearvalue() {
        this.buttonAutoCompleteClearClicked = true;
        this.config.formGroup.controls[this.config.id].setValue('');
        this.renderer.selectRootElement(this.inputEl?.nativeElement).focus();
        this.focusEvent.emit(true);
    }
    /**
     * Prevents the info button from being triggered and marks the input as touched.
     * @param event
     */
    enterEvent(event) {
        event.preventDefault();
        this.config.formGroup.get(this.config.id)?.markAsTouched();
        this.focusEvent.emit(false);
    }
    escapeEvent(event) {
        event.preventDefault();
        this.config.formGroup.get(this.config.id)?.markAsTouched();
        this.focusEvent.emit(false);
    }
    changeValue(event) {
        this.writeValue(event.srcElement.value);
        this.onTouch();
    }
    writeValue(value) {
        this.onChange(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * Apply a disabled state
     */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formGroup.get(this.config.id)?.disable();
        }
        else {
            this.formGroup.get(this.config.id)?.enable();
        }
    }
    /**
     * Return error state from FormGroup, must be touched & invalid
     */
    get getErrorState() {
        return ((this.config.formGroup.get(this.config.id)?.touched &&
            this.config.formGroup.get(this.config.id)?.invalid) ??
            false);
    }
    get getValueLength() {
        if (this.config.formGroup.get(this.config.id)?.value) {
            return this.config.formGroup.get(this.config.id)?.value.length;
        }
        else {
            return 0;
        }
    }
}
InputComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: InputComponent, deps: [{ token: i1.StandAloneFunctions }, { token: i2.TranslateService }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }], target: i0.ÉµÉµFactoryTarget.Component });
InputComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: InputComponent, selector: "ircc-cl-lib-input", inputs: { config: "config", id: "id", formGroup: "formGroup", type: "type", size: "size", label: "label", hint: "hint", desc: "desc", required: "required", placeholder: "placeholder", errorMessages: "errorMessages" }, outputs: { focusEvent: "focusEvent" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEl"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  id=\"{{ config.id + '_container' }}\"\n  class=\"input-wrapper\"\n>\n  <form\n    [formGroup]=\"config.formGroup\"\n    [attr.autocomplete]=\"config.type !== 'autocomplete' ? true : false\"\n  >\n    <div\n      class=\"input-container\"\n      [ngClass]=\"config.size\"\n    >\n      <div class=\"input-text\">\n        <ircc-cl-lib-label\n          [config]=\"labelConfig\"\n          [attr.size]=\"config.size\"\n        ></ircc-cl-lib-label>\n        <div\n          class=\"input-content-area\"\n          [ngClass]=\"focusState === true ? 'focus' : ''\"\n        >\n          <!-- ngModel doesn't mind undefined values, apparently\n          TODO: Should probably change the (keyup) to (onblur) -->\n          <input\n            (blur)=\"onTouchedLabel()\"\n            (focus)=\"onFocus()\"\n            (change)=\"changeValue($event)\"\n            name=\"{{ config.id }}\"\n            class=\"input-field\"\n            placeholder=\"{{ config.placeholder || '' | translate }}\"\n            tabindex=\"0\"\n            [ngClass]=\"\n              config.type === 'password'\n                ? 'input-password-field'\n                : 'input-text-field'\n            \"\n            #inputEl\n            [type]=\"typeControl\"\n            [id]=\"config.id\"\n            [formControlName]=\"config.id\"\n            (keydown.enter)=\"enterEvent($event)\"\n            (keydown.escape)=\"escapeEvent($event)\"\n            [attr.aria-invalid]=\"formControl?.invalid\"\n            [attr.aria-live]=\"'off'\"\n            [attr.aria-label]=\"\n              formControl?.invalid && touched\n                ? (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate) +\n                  ' ' +\n                  (errorStubText + ': ' + errorAria)\n                : (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate)\n            \"\n          />\n\n          <button\n            *ngIf=\"config.type === 'password'\"\n            role=\"button\"\n            category=\"plain\"\n            tabindex=\"0\"\n            class=\"passwordIcon\"\n            (click)=\"hideShow()\"\n            [disabled]=\"currentStatus === 'DISABLED'\"\n            attr.aria-label=\"{{ btnAriaLabel }}\"\n            aria-live=\"polite\"\n          >\n            <div\n              *ngIf=\"showPassword\"\n              role=\"img\"\n              attr.aria-label=\"{{ btnAriaLabelHide }}\"\n            >\n              <i class=\"fa-solid fa-eye-slash\"></i>\n            </div>\n            <div\n              *ngIf=\"!showPassword\"\n              role=\"img\"\n              attr.aria-label=\"{{ btnAriaLabelShow }}\"\n            >\n              <i class=\"fa-solid fa-eye\"></i>\n            </div>\n          </button>\n\n          <ng-container\n            *ngIf=\"config.type === 'autocomplete' && getValueLength > 0\"\n          >\n            <ircc-cl-lib-icon-button\n              class=\"autocompleteicon\"\n              (clickEvent)=\"clearvalue()\"\n              [config]=\"buttonAutoCompleteClear\"\n              [attr.size]=\"config.size\"\n            ></ircc-cl-lib-icon-button>\n          </ng-container>\n        </div>\n      </div>\n      <div aria-live=\"polite\">\n        <div *ngIf=\"config.formGroup.get(config.id)?.touched && currentStatus === 'INVALID'\">\n          <span class=\"sr-only\">{{\n            errorStubText + ': ' + (config.label || '' | translate) + ': '\n          }}</span>\n          <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n            <div\n              *ngIf=\"formControl?.errors?.[errors.key]\"\n              class=\"radio-errors\"\n            >\n              <ircc-cl-lib-error\n                [id]=\"errors.id\"\n                [errorLOV]=\"errors.errorLOV\"\n                [size]=\"config.size\"\n              ></ircc-cl-lib-error>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.IconButtonComponent, selector: "ircc-cl-lib-icon-button", inputs: ["config", "id", "category", "size", "ariaLabel", "disabled", "icon"], outputs: ["clickEvent"] }, { kind: "component", type: i5.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "directive", type: i6.ÉµNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i6.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i7.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: InputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputComponent),
                            multi: true
                        }
                    ], template: "<div\n  id=\"{{ config.id + '_container' }}\"\n  class=\"input-wrapper\"\n>\n  <form\n    [formGroup]=\"config.formGroup\"\n    [attr.autocomplete]=\"config.type !== 'autocomplete' ? true : false\"\n  >\n    <div\n      class=\"input-container\"\n      [ngClass]=\"config.size\"\n    >\n      <div class=\"input-text\">\n        <ircc-cl-lib-label\n          [config]=\"labelConfig\"\n          [attr.size]=\"config.size\"\n        ></ircc-cl-lib-label>\n        <div\n          class=\"input-content-area\"\n          [ngClass]=\"focusState === true ? 'focus' : ''\"\n        >\n          <!-- ngModel doesn't mind undefined values, apparently\n          TODO: Should probably change the (keyup) to (onblur) -->\n          <input\n            (blur)=\"onTouchedLabel()\"\n            (focus)=\"onFocus()\"\n            (change)=\"changeValue($event)\"\n            name=\"{{ config.id }}\"\n            class=\"input-field\"\n            placeholder=\"{{ config.placeholder || '' | translate }}\"\n            tabindex=\"0\"\n            [ngClass]=\"\n              config.type === 'password'\n                ? 'input-password-field'\n                : 'input-text-field'\n            \"\n            #inputEl\n            [type]=\"typeControl\"\n            [id]=\"config.id\"\n            [formControlName]=\"config.id\"\n            (keydown.enter)=\"enterEvent($event)\"\n            (keydown.escape)=\"escapeEvent($event)\"\n            [attr.aria-invalid]=\"formControl?.invalid\"\n            [attr.aria-live]=\"'off'\"\n            [attr.aria-label]=\"\n              formControl?.invalid && touched\n                ? (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate) +\n                  ' ' +\n                  (errorStubText + ': ' + errorAria)\n                : (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate)\n            \"\n          />\n\n          <button\n            *ngIf=\"config.type === 'password'\"\n            role=\"button\"\n            category=\"plain\"\n            tabindex=\"0\"\n            class=\"passwordIcon\"\n            (click)=\"hideShow()\"\n            [disabled]=\"currentStatus === 'DISABLED'\"\n            attr.aria-label=\"{{ btnAriaLabel }}\"\n            aria-live=\"polite\"\n          >\n            <div\n              *ngIf=\"showPassword\"\n              role=\"img\"\n              attr.aria-label=\"{{ btnAriaLabelHide }}\"\n            >\n              <i class=\"fa-solid fa-eye-slash\"></i>\n            </div>\n            <div\n              *ngIf=\"!showPassword\"\n              role=\"img\"\n              attr.aria-label=\"{{ btnAriaLabelShow }}\"\n            >\n              <i class=\"fa-solid fa-eye\"></i>\n            </div>\n          </button>\n\n          <ng-container\n            *ngIf=\"config.type === 'autocomplete' && getValueLength > 0\"\n          >\n            <ircc-cl-lib-icon-button\n              class=\"autocompleteicon\"\n              (clickEvent)=\"clearvalue()\"\n              [config]=\"buttonAutoCompleteClear\"\n              [attr.size]=\"config.size\"\n            ></ircc-cl-lib-icon-button>\n          </ng-container>\n        </div>\n      </div>\n      <div aria-live=\"polite\">\n        <div *ngIf=\"config.formGroup.get(config.id)?.touched && currentStatus === 'INVALID'\">\n          <span class=\"sr-only\">{{\n            errorStubText + ': ' + (config.label || '' | translate) + ': '\n          }}</span>\n          <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n            <div\n              *ngIf=\"formControl?.errors?.[errors.key]\"\n              class=\"radio-errors\"\n            >\n              <ircc-cl-lib-error\n                [id]=\"errors.id\"\n                [errorLOV]=\"errors.errorLOV\"\n                [size]=\"config.size\"\n              ></ircc-cl-lib-error>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StandAloneFunctions }, { type: i2.TranslateService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], type: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], hint: [{
                type: Input
            }], desc: [{
                type: Input
            }], required: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }], focusEvent: [{
                type: Output
            }], inputEl: [{
                type: ViewChild,
                args: ['inputEl']
            }] } });
//# sourceMappingURL=data:application/json;base64,