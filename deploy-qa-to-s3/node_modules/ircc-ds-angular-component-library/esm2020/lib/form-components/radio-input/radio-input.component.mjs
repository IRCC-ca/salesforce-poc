import { Component, forwardRef, Input } from '@angular/core';
import { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ERROR_TEXT_STUB } from '../../shared/label/label.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/functions/stand-alone.functions";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/label/label.component";
import * as i5 from "@angular/forms";
import * as i6 from "../error/error.component";
export class RadioInputComponent {
    constructor(standAloneFunctions, translate) {
        this.standAloneFunctions = standAloneFunctions;
        this.translate = translate;
        this.formGroupEmpty = new FormGroup({});
        this.touched = false;
        this.errorIds = [];
        this.currentStatus = 'VALID';
        this.config = {
            id: '',
            formGroup: this.formGroupEmpty
        };
        this.id = '';
        this.formGroup = this.formGroupEmpty;
        this.labelConfig = {
            formGroup: this.config.formGroup,
            parentID: ''
        };
        this.errorStubText = '';
        this.errorAria = '';
        this.onTouch = () => {
            if (this.formGroup?.get(this.config.id)?.touched === false) {
                this.formGroup?.get(this.config.id)?.markAsTouched();
            }
        };
        this.onChange = (value) => {
            this.config.formGroup.get(this.config.id)?.setValue(value);
        };
    }
    changeValue(event) {
        this.writeValue(event.srcElement.value);
        this.onTouch();
    }
    writeValue(value) {
        this.onChange(value);
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouch();
            this.touched = true;
        }
    }
    ngOnInit() {
        const retControl = this.config.formGroup.get(this.config.id);
        if (retControl) {
            this.formControl = retControl;
        }
        this.setLang(this.translate.currentLang);
        this.translate.onLangChange.subscribe((change) => {
            this.setLang(change.lang);
        });
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        //set config from individual options, if present
        if (this.id !== '')
            this.config.id = this.id;
        if (this.formGroup !== this.formGroupEmpty)
            this.config.formGroup = this.formGroup;
        if (this.size)
            this.config.size = this.size;
        if (this.label)
            this.config.label = this.label;
        if (this.desc)
            this.config.desc = this.desc;
        if (this.hint)
            this.config.hint = this.hint;
        if (this.required)
            this.config.required = this.required;
        if (this.options)
            this.config.options = this.options;
        if (this.disabled)
            this.config.disabled = this.disabled;
        if (this.error)
            this.config.error = this.error;
        if (this.validators)
            this.config.validators = this.validators;
        if (this.helpText)
            this.config.helpText = this.helpText;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
        this.currentStatus = this.config.formGroup.get(this.config.id)?.status || 'DISABLED';
        this.toggleDisabledState();
        this.config.formGroup
            .get(this.config.id)
            ?.statusChanges.subscribe((change) => {
            this.getAriaErrorText();
            if (change !== this.currentStatus) {
                this.currentStatus = change;
                this.toggleDisabledState();
            }
        });
    }
    toggleDisabledState() {
        switch (this.currentStatus) {
            case 'DISABLED':
                this.setDisabledState(true);
                break;
            default:
                this.setDisabledState(false);
                break;
        }
    }
    ngOnChanges() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
    }
    /**
     * Get the aria error text for the label
     */
    getAriaErrorText() {
        if (this.config.errorMessages) {
            this.formControl?.markAsDirty();
            this.errorAria = this.standAloneFunctions.getErrorAria(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
    }
    /**
     * Set a boolean representing the touched state to true and trigger getAriaErrorText()
     */
    onTouchedLabel() {
        this.touched = true;
        this.getAriaErrorText();
    }
    setLang(lang) {
        this.getAriaErrorText();
        if (lang === 'en' || lang === 'en-US') {
            this.errorStubText = ERROR_TEXT_STUB.en;
        }
        else {
            this.errorStubText = ERROR_TEXT_STUB.fr;
        }
    }
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formGroup.get(this.config.id)?.disable();
        }
        else {
            this.formGroup.get(this.config.id)?.enable();
        }
    }
}
RadioInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: RadioInputComponent, deps: [{ token: i1.StandAloneFunctions }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RadioInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: RadioInputComponent, selector: "ircc-cl-lib-radio-input", inputs: { config: "config", id: "id", formGroup: "formGroup", size: "size", label: "label", desc: "desc", hint: "hint", required: "required", options: "options", disabled: "disabled", error: "error", validators: "validators", helpText: "helpText", errorMessages: "errorMessages" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => RadioInputComponent) //This allows the error state to be turned off and on again
        }
    ], usesOnChanges: true, ngImport: i0, template: "<form\n  [formGroup]=\"config.formGroup\"\n  [ngClass]=\"config.size\"\n>\n  <ircc-cl-lib-label\n    [config]=\"labelConfig\"\n    [attr.size]=\"config.size\"\n    [legend]=\"true\"\n  ></ircc-cl-lib-label>\n  <div class=\"radio-buttons\">\n    <div\n      *ngFor=\"let option of config.options; let index = index\"\n      class=\"radio\"\n    >\n      <!-- TODO: See if we can remove the error state from here, since it is controlled by the formControl -->\n      <input\n        (blur)=\"touched = true\"\n        type=\"radio\"\n        value=\"{{ option.value || option.text }}\"\n        id=\"{{ config.id + index }}\"\n        (click)=\"standAloneFunctions.wasTouched(config.formGroup, config.id)\"\n        [formControlName]=\"config.id ? config.id : 'formControl'\"\n        [ngClass]=\"option?.sizeOverride ? option?.sizeOverride : config.size\"\n        [attr.aria-invalid]=\"formControl?.invalid\"\n        [attr.aria-live]=\"'off'\"\n        [attr.aria-label]=\"\n          formControl?.invalid && touched\n            ? (config.label || '' | translate) +\n              ' ' +\n              (config.desc || '' | translate) +\n              ' ' +\n              (config.hint || '' | translate) +\n              ' ' +\n              (config.helpText || '' | translate) +\n              ' ' +\n              (option.text || '' | translate) +\n              ' ' +\n              (errorStubText + ': ' + errorAria)\n            : (config.label || '' | translate) +\n              ' ' +\n              (config.desc || '' | translate) +\n              ' ' +\n              (config.hint || '' | translate) +\n              ' ' +\n              (config.helpText || '' | translate) +\n              ' ' +\n              (option.text || '' | translate)\n        \"\n      />\n      <label\n        for=\"{{ config.id + index }}\"\n        [ngClass]=\"\n          option?.sizeOverride\n            ? option?.sizeOverride + '_label'\n            : config.size + '_label'\n        \"\n        >{{ option.text || '' | translate }}</label\n      >\n    </div>\n  </div>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"config.formGroup.get(config.id)?.touched && currentStatus === 'INVALID'\">\n      <span class=\"sr-only\">{{\n        errorStubText + ': ' + (config.label || '' | translate) + ': '\n      }}</span>\n      <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n        <div\n          *ngIf=\"formControl?.errors?.[errors.key]\"\n          class=\"radio-errors\"\n        >\n          <ircc-cl-lib-error\n            [id]=\"errors.id\"\n            [errorLOV]=\"errors.errorLOV\"\n            [size]=\"config.size\"\n          ></ircc-cl-lib-error>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "directive", type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i6.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: RadioInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-radio-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => RadioInputComponent) //This allows the error state to be turned off and on again
                        }
                    ], template: "<form\n  [formGroup]=\"config.formGroup\"\n  [ngClass]=\"config.size\"\n>\n  <ircc-cl-lib-label\n    [config]=\"labelConfig\"\n    [attr.size]=\"config.size\"\n    [legend]=\"true\"\n  ></ircc-cl-lib-label>\n  <div class=\"radio-buttons\">\n    <div\n      *ngFor=\"let option of config.options; let index = index\"\n      class=\"radio\"\n    >\n      <!-- TODO: See if we can remove the error state from here, since it is controlled by the formControl -->\n      <input\n        (blur)=\"touched = true\"\n        type=\"radio\"\n        value=\"{{ option.value || option.text }}\"\n        id=\"{{ config.id + index }}\"\n        (click)=\"standAloneFunctions.wasTouched(config.formGroup, config.id)\"\n        [formControlName]=\"config.id ? config.id : 'formControl'\"\n        [ngClass]=\"option?.sizeOverride ? option?.sizeOverride : config.size\"\n        [attr.aria-invalid]=\"formControl?.invalid\"\n        [attr.aria-live]=\"'off'\"\n        [attr.aria-label]=\"\n          formControl?.invalid && touched\n            ? (config.label || '' | translate) +\n              ' ' +\n              (config.desc || '' | translate) +\n              ' ' +\n              (config.hint || '' | translate) +\n              ' ' +\n              (config.helpText || '' | translate) +\n              ' ' +\n              (option.text || '' | translate) +\n              ' ' +\n              (errorStubText + ': ' + errorAria)\n            : (config.label || '' | translate) +\n              ' ' +\n              (config.desc || '' | translate) +\n              ' ' +\n              (config.hint || '' | translate) +\n              ' ' +\n              (config.helpText || '' | translate) +\n              ' ' +\n              (option.text || '' | translate)\n        \"\n      />\n      <label\n        for=\"{{ config.id + index }}\"\n        [ngClass]=\"\n          option?.sizeOverride\n            ? option?.sizeOverride + '_label'\n            : config.size + '_label'\n        \"\n        >{{ option.text || '' | translate }}</label\n      >\n    </div>\n  </div>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"config.formGroup.get(config.id)?.touched && currentStatus === 'INVALID'\">\n      <span class=\"sr-only\">{{\n        errorStubText + ': ' + (config.label || '' | translate) + ': '\n      }}</span>\n      <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n        <div\n          *ngIf=\"formControl?.errors?.[errors.key]\"\n          class=\"radio-errors\"\n        >\n          <ircc-cl-lib-error\n            [id]=\"errors.id\"\n            [errorLOV]=\"errors.errorLOV\"\n            [size]=\"config.size\"\n          ></ircc-cl-lib-error>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StandAloneFunctions }, { type: i2.TranslateService }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], desc: [{
                type: Input
            }], hint: [{
                type: Input
            }], required: [{
                type: Input
            }], options: [{
                type: Input
            }], disabled: [{
                type: Input
            }], error: [{
                type: Input
            }], validators: [{
                type: Input
            }], helpText: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,