import { Component, Input, SecurityContext, ViewChild } from '@angular/core';
import { FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
import * as i3 from "../../shared/flyout/flyout.component";
import * as i4 from "../input/input.component";
export var matchType;
(function (matchType) {
    matchType["infix"] = "infix";
    matchType["prefix"] = "prefix";
})(matchType || (matchType = {}));
export class AutoCompleteComponent {
    constructor(domSanitizer, changeDetectorRef) {
        this.domSanitizer = domSanitizer;
        this.changeDetectorRef = changeDetectorRef;
        this.formGroupEmpty = new FormGroup({});
        this.config = {
            id: 'auto-complete',
            formGroup: this.formGroupEmpty,
            label: 'label',
            hint: 'hint',
            desc: 'desc',
            size: 'small',
            suggestions: []
        };
        this.matchType = 'infix';
        this.showSuggestions = false;
        this.formGroup = this.formGroupEmpty;
        this.inputComponent = {
            ...this.config,
            type: 'autocomplete'
        };
        this.flyout = {
            id: 'string',
            options: [],
            type: 'autocomplete',
            size: this.config.size
        };
    }
    ngOnChanges(changes) {
        this.inputComponent = {
            ...this.config,
            type: 'autocomplete'
        };
        this.flyout.size = this.config.size;
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    ngOnInit() {
        if (this.formGroup !== this.formGroupEmpty) {
            this.config.formGroup = this.formGroup;
        }
        this.inputComponent.id = this.config.id;
        this.inputComponent.formGroup = this.config.formGroup;
        this.inputComponent.label = this.config.label;
        this.inputComponent.hint = this.config.hint;
        this.inputComponent.desc = this.config.desc;
        this.inputComponent.size = this.config.size;
        this.inputComponent.errorMessages = this.config.errorMessages;
        this.inputComponent.placeholder = this.config.placeholder;
        this.flyout.id = `${this.config.id}-flyout`;
        this.flyout.options = this.config.suggestions.map((suggestion) => {
            return {
                value: suggestion,
                clickable: true
            };
        });
        this.config.formGroup
            .get(this.config.id)
            ?.valueChanges.subscribe((data) => {
            if (data === null || data.length === 0) {
                this.flyout.selected = '';
                this.flyout.options = [];
                this.flyout.options = this.config.suggestions.map((suggestion) => {
                    return {
                        value: suggestion,
                        clickable: true
                    };
                });
            }
            else {
                this.validateInternal(data);
            }
        });
        this.inputComponent = {
            ...this.config,
            type: 'autocomplete'
        };
    }
    spreadFlyoutOption(value) {
        return {
            value: value,
            clickable: true
        };
    }
    onFocus(event) {
        let timeoutTime = 0;
        if (event === false) {
            timeoutTime = 500;
        }
        setTimeout(() => {
            this.showSuggestions = event;
        }, timeoutTime);
        // Set 1st option as active when on focus
        if (this.flyout.options.length > 0) {
            this.flyout.options[0].active = true;
        }
    }
    isSelected(event) {
        if (event !== null) {
            const tempDivElement = document.createElement('div');
            tempDivElement.innerHTML = event || '';
            const convertedString = tempDivElement.textContent || tempDivElement.innerText || '';
            this.config.formGroup.get(this.config.id)?.setValue(convertedString);
            this.showSuggestions = false;
        }
    }
    validateInternal(data) {
        this.flyout.options = [];
        let eventString = this.domSanitizer.sanitize(SecurityContext.HTML, data.replace(/<[^>]*>/g, ''));
        let re;
        if (this.matchType === 'infix') {
            const infixMatching = new RegExp(`${data}`);
            re = new RegExp(`${infixMatching.source}`, 'i');
        }
        else {
            const paragraphStart = new RegExp(`^${data}`);
            const whitespaceStart = new RegExp(`\\s+\\b${data}[a-zA-Z]*`);
            re = new RegExp(`${paragraphStart.source}|${whitespaceStart.source}`, 'i');
        }
        this.flyout.selected = data;
        this.flyout.options = this.config.suggestions
            .filter((suggestion) => suggestion.search(re) >= 0)
            .map((suggestion) => {
            return {
                value: suggestion,
                clickable: true
            };
        });
        if (this.flyout.options.length === 0) {
            this.flyout.options = [
                {
                    value: 'No options found',
                    clickable: false
                }
            ];
        }
    }
}
AutoCompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: AutoCompleteComponent, deps: [{ token: i1.DomSanitizer }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AutoCompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: AutoCompleteComponent, selector: "ircc-cl-lib-autocomplete", inputs: { config: "config", formGroup: "formGroup" }, viewQueries: [{ propertyName: "inputAutocomplete", first: true, predicate: ["inputAutocomplete"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #inputAutocomplete\n  [attr.size]=\"config.size\"\n>\n  <ircc-cl-lib-input\n    [attr.size]=\"config.size\"\n    [config]=\"inputComponent\"\n    type=\"autocomplete\"\n    (focusEvent)=\"onFocus($event)\"\n  ></ircc-cl-lib-input>\n\n  <ng-container *ngIf=\"showSuggestions === true\">\n    <ircc-cl-lib-flyout\n      (isSelected)=\"isSelected($event)\"\n      [config]=\"flyout\"\n      [class]=\"config.size\"\n    ></ircc-cl-lib-flyout>\n  </ng-container>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.FlyoutComponent, selector: "ircc-cl-lib-flyout", inputs: ["config", "id", "options", "disabled", "selection", "type", "size"], outputs: ["isSelected"] }, { kind: "component", type: i4.InputComponent, selector: "ircc-cl-lib-input", inputs: ["config", "id", "formGroup", "type", "size", "label", "hint", "desc", "required", "placeholder", "errorMessages"], outputs: ["focusEvent"] }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: AutoCompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-autocomplete', template: "<div\n  #inputAutocomplete\n  [attr.size]=\"config.size\"\n>\n  <ircc-cl-lib-input\n    [attr.size]=\"config.size\"\n    [config]=\"inputComponent\"\n    type=\"autocomplete\"\n    (focusEvent)=\"onFocus($event)\"\n  ></ircc-cl-lib-input>\n\n  <ng-container *ngIf=\"showSuggestions === true\">\n    <ircc-cl-lib-flyout\n      (isSelected)=\"isSelected($event)\"\n      [config]=\"flyout\"\n      [class]=\"config.size\"\n    ></ircc-cl-lib-flyout>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputAutocomplete: [{
                type: ViewChild,
                args: ['inputAutocomplete', { static: false }]
            }], config: [{
                type: Input
            }], formGroup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,