import { Component, forwardRef, Input } from '@angular/core';
import { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { DSSizes } from '../../../shared/constants/jl-components.constants';
import { ERROR_TEXT_STUB } from '../../shared/label/label.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/functions/stand-alone.functions";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../multi-checkbox/multi-checkbox.service";
import * as i4 from "@angular/common";
import * as i5 from "../../shared/label/label.component";
import * as i6 from "@angular/forms";
import * as i7 from "../error/error.component";
export class CheckboxComponent {
    constructor(standAloneFunctions, translate, multicheckboxService) {
        this.standAloneFunctions = standAloneFunctions;
        this.translate = translate;
        this.multicheckboxService = multicheckboxService;
        this.formGroupEmpty = new FormGroup({});
        //TODO: Add output - consider using a formControl as output rather than anything else. Many different approaches are possible
        this.config = {
            id: '',
            formGroup: this.formGroupEmpty,
            size: DSSizes.large,
            label: '',
            inlineLabel: ''
        };
        this.formGroup = this.formGroupEmpty;
        this.id = '';
        this.label = '';
        this.isDisabled = false;
        this.errorIds = [];
        this.labelConfig = {
            formGroup: this.config.formGroup,
            parentID: ''
        };
        this.touched = false;
        this.errorAria = '';
        this.errorStubText = '';
        this.currentStatus = 'VALID';
        this.currentTouch = false;
        this.onTouch = () => {
            if (this.formGroup?.get(this.config.id)?.touched === false) {
                this.formGroup?.get(this.config.id)?.markAsTouched();
            }
        };
        this.onChange = (value) => {
            this.config.formGroup.get(this.config.id)?.setValue(value);
        };
    }
    changeValue(event) {
        this.writeValue(event.srcElement.value);
        this.onTouch();
    }
    writeValue(value) {
        this.onChange(value);
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouch = onTouched;
    }
    /**
     * This is used automatically by the parent formControl. It is used in the template to set the label to disabled
     * @param isDisabled
     */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formGroup.get(this.config.id)?.disable();
        }
        else {
            this.formGroup.get(this.config.id)?.enable();
        }
    }
    ngOnInit() {
        const retControl = this.config.formGroup.get(this.config.id);
        if (retControl) {
            this.formControl = retControl;
        }
        this.configSub = this.multicheckboxService.multiCheckboxEventObs$.subscribe((response) => {
            if (response.id === this.config.id) {
                this.config.formGroup
                    .get(this.config.id)
                    ?.patchValue(response.event, { emitEvent: false });
            }
        });
        this.config.formGroup
            .get(this.config.id)
            ?.valueChanges.subscribe((event) => {
            this.multicheckboxService.checkEvent({
                id: this.config.id,
                event: event
            });
        });
        this.setLang(this.translate.currentLang);
        this.translate.onLangChange.subscribe((change) => {
            this.setLang(change.lang);
        });
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        //set config from individual options, if present
        if (this.formGroup !== this.formGroupEmpty) {
            this.config.formGroup = this.formGroup;
        }
        if (this.id)
            this.config.id = this.id;
        if (this.label)
            this.config.label = this.label;
        if (this.required)
            this.config.required = this.required;
        if (this.size)
            this.config.size = this.size;
        if (this.mixed)
            this.config.mixed = this.mixed;
        if (this.inlineLabel)
            this.config.inlineLabel = this.inlineLabel;
        if (this.inlineLabelBold)
            this.config.inlineLabelBold = this.inlineLabelBold;
        if (this.hint)
            this.config.hint = this.hint;
        if (this.desc)
            this.config.desc = this.desc;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
        if (!this.config?.size)
            this.config.size = DSSizes.large;
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id, this.config.errorMessages);
            this.errorIds.forEach((errorId) => {
                this.multicheckboxService.errorEvent(this.config.id);
            });
        }
        this.currentStatus =
            this.config.formGroup.get(this.config.id)?.status || 'DISABLED';
        this.toggleDisabledState();
        this.config.formGroup
            .get(this.config.id)
            ?.statusChanges.subscribe((change) => {
            this.getAriaErrorText();
            //Get the error text when the formControl value changes
            if (change === 'VALID') {
                this.multicheckboxService.errorEvent(this.config.id);
            }
            if (change !== this.currentStatus) {
                this.currentStatus = change;
                this.toggleDisabledState();
            }
            this.setStatus();
        });
        console.log(this.labelConfig);
    }
    setStatus() {
        this.currentStatus =
            this.config.formGroup.get(this.config.id)?.status || 'DISABLED';
        this.currentTouch = this.config.formGroup.controls[this.config.id].touched;
    }
    ngAfterViewInit() {
        this.setStatus();
    }
    toggleDisabledState() {
        switch (this.currentStatus) {
            case 'DISABLED':
                this.setDisabledState(true);
                break;
            default:
                this.setDisabledState(false);
                break;
        }
    }
    ngOnChanges() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
    }
    /**
     * Get the aria error text for the label
     */
    getAriaErrorText() {
        if (this.config.errorMessages) {
            this.formControl?.markAsDirty();
            this.errorAria = this.standAloneFunctions.getErrorAria(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
    }
    /**
     * Set a boolean representing the touched state to true and trigger getAriaErrorText()
     */
    onTouchedLabel() {
        this.touched = true;
        this.getAriaErrorText();
    }
    setLang(lang) {
        this.getAriaErrorText();
        if (lang === 'en' || lang === 'en-US') {
            this.errorStubText = ERROR_TEXT_STUB.en;
        }
        else {
            this.errorStubText = ERROR_TEXT_STUB.fr;
        }
    }
    /**
     * Return error state from FormGroup, must be touched & invalid
     */
    get errorState() {
        this.setStatus();
        return ((this.currentTouch &&
            this.currentStatus === 'INVALID') ??
            false);
    }
    clickEvent() {
        this.standAloneFunctions.wasTouched(this.config.formGroup, this.config.id);
    }
    ariaAccess() {
        let returnVal = '';
        if (this.config.label)
            returnVal += this.translate.instant(this.config.label || '') + ' ';
        if (this.config.desc)
            returnVal += this.translate.instant(this.config.desc || '') + ' ';
        if (this.config.hint)
            returnVal += this.translate.instant(this.config.hint || '') + ' ';
        if (this.config.inlineLabel)
            returnVal += this.translate.instant(this.config.inlineLabel || '') + ' ';
        if (this.config.mixed) {
            returnVal += 'Mixed checkbox';
        }
        if (this.config.formGroup.get(this.config.id)?.invalid &&
            this.config.formGroup.get(this.config.id)?.touched) {
            returnVal += this.errorStubText;
            returnVal += this.errorAria;
        }
        return returnVal;
    }
}
CheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CheckboxComponent, deps: [{ token: i1.StandAloneFunctions }, { token: i2.TranslateService }, { token: i3.MultiCheckboxService }], target: i0.ɵɵFactoryTarget.Component });
CheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: CheckboxComponent, selector: "ircc-cl-lib-checkbox", inputs: { config: "config", formGroup: "formGroup", id: "id", label: "label", required: "required", size: "size", mixed: "mixed", inlineLabel: "inlineLabel", inlineLabelBold: "inlineLabelBold", hint: "hint", desc: "desc", errorMessages: "errorMessages" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => CheckboxComponent),
            multi: true
        }
    ], usesOnChanges: true, ngImport: i0, template: "<form\n  class=\"checkbox-container\"\n  [formGroup]=\"config.formGroup\"\n>\n  <div\n    class=\"checkbox-container\"\n    [ngClass]=\"config.size\"\n  >\n    <ircc-cl-lib-label\n      [config]=\"labelConfig\"\n      [attr.size]=\"config.size\"\n      [legend]=\"true\"\n    ></ircc-cl-lib-label>\n    <div\n      class=\"checkbox-layout\"\n      [ngClass]=\"{\n        error: currentStatus === 'INVALID' && currentTouch === true\n      }\"\n    >\n      <div class=\"checkbox\">\n        <input\n          [attr.aria-live]=\"'off'\"\n          id=\"{{ config.id }}\"\n          class=\"check\"\n          (click)=\"clickEvent()\"\n          [ngClass]=\"{\n            mixed: config.mixed,\n            error: currentStatus === 'INVALID' && currentTouch === true\n          }\"\n          [attr.size]=\"config.size\"\n          type=\"checkbox\"\n          [formControlName]=\"config.id\"\n          [attr.aria-invalid]=\"formControl?.invalid\"\n          [attr.aria-label]=\"ariaAccess()\"\n        />\n        <span class=\"checkmark\"></span>\n      </div>\n      <label\n        [attr.aria-live]=\"'off'\"\n        class=\"checkbox-desc-label\"\n        [for]=\"config.id\"\n        [id]=\"config.id + ' checkbox_label'\"\n        [ngClass]=\"{\n          'disabled-label': currentStatus === 'DISABLED',\n          small: config.size === 'small',\n          makeBold: config.inlineLabelBold\n        }\"\n        >{{ config.inlineLabel || '' | translate }}\n      </label>\n    </div>\n    <div aria-live=\"polite\">\n      <div\n        *ngIf=\"errorState\"\n        class=\"check-error\"\n        [ngClass]=\"{ small: config.size === 'small' }\"\n      >\n        <span class=\"sr-only\">{{\n          errorStubText + ': ' + (config.label || '' | translate) + ': '\n        }}</span>\n\n        <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n          <div\n            *ngIf=\"formControl?.errors?.[errors.key]\"\n            class=\"radio-errors\"\n          >\n            <ircc-cl-lib-error\n              [id]=\"errors.id\"\n              [errorLOV]=\"errors.errorLOV\"\n              [size]=\"config.size\"\n            ></ircc-cl-lib-error>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i6.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i7.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-checkbox', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => CheckboxComponent),
                            multi: true
                        }
                    ], template: "<form\n  class=\"checkbox-container\"\n  [formGroup]=\"config.formGroup\"\n>\n  <div\n    class=\"checkbox-container\"\n    [ngClass]=\"config.size\"\n  >\n    <ircc-cl-lib-label\n      [config]=\"labelConfig\"\n      [attr.size]=\"config.size\"\n      [legend]=\"true\"\n    ></ircc-cl-lib-label>\n    <div\n      class=\"checkbox-layout\"\n      [ngClass]=\"{\n        error: currentStatus === 'INVALID' && currentTouch === true\n      }\"\n    >\n      <div class=\"checkbox\">\n        <input\n          [attr.aria-live]=\"'off'\"\n          id=\"{{ config.id }}\"\n          class=\"check\"\n          (click)=\"clickEvent()\"\n          [ngClass]=\"{\n            mixed: config.mixed,\n            error: currentStatus === 'INVALID' && currentTouch === true\n          }\"\n          [attr.size]=\"config.size\"\n          type=\"checkbox\"\n          [formControlName]=\"config.id\"\n          [attr.aria-invalid]=\"formControl?.invalid\"\n          [attr.aria-label]=\"ariaAccess()\"\n        />\n        <span class=\"checkmark\"></span>\n      </div>\n      <label\n        [attr.aria-live]=\"'off'\"\n        class=\"checkbox-desc-label\"\n        [for]=\"config.id\"\n        [id]=\"config.id + ' checkbox_label'\"\n        [ngClass]=\"{\n          'disabled-label': currentStatus === 'DISABLED',\n          small: config.size === 'small',\n          makeBold: config.inlineLabelBold\n        }\"\n        >{{ config.inlineLabel || '' | translate }}\n      </label>\n    </div>\n    <div aria-live=\"polite\">\n      <div\n        *ngIf=\"errorState\"\n        class=\"check-error\"\n        [ngClass]=\"{ small: config.size === 'small' }\"\n      >\n        <span class=\"sr-only\">{{\n          errorStubText + ': ' + (config.label || '' | translate) + ': '\n        }}</span>\n\n        <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n          <div\n            *ngIf=\"formControl?.errors?.[errors.key]\"\n            class=\"radio-errors\"\n          >\n            <ircc-cl-lib-error\n              [id]=\"errors.id\"\n              [errorLOV]=\"errors.errorLOV\"\n              [size]=\"config.size\"\n            ></ircc-cl-lib-error>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StandAloneFunctions }, { type: i2.TranslateService }, { type: i3.MultiCheckboxService }]; }, propDecorators: { config: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], id: [{
                type: Input
            }], label: [{
                type: Input
            }], required: [{
                type: Input
            }], size: [{
                type: Input
            }], mixed: [{
                type: Input
            }], inlineLabel: [{
                type: Input
            }], inlineLabelBold: [{
                type: Input
            }], hint: [{
                type: Input
            }], desc: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,