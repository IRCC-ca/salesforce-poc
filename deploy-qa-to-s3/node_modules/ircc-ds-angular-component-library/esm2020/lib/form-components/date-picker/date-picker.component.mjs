import { Component, forwardRef, Input } from '@angular/core';
import { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ERROR_TEXT_STUB } from '../../shared/label/label.component';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../../../shared/functions/stand-alone.functions";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/label/label.component";
import * as i5 from "../error/error.component";
import * as i6 from "../select/select.component";
export const DATE_PICKER_MONTHS_EN = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
];
export const DATE_PICKER_MONTHS_FR = [
    'janvier',
    'février',
    'mars',
    'avril',
    'mai',
    'juin',
    'juillet',
    'août',
    'septembre',
    'octobre',
    'novembre',
    'décembre'
];
export const DATE_PICKER_DAY_CONTROL_ID_EXTENSION = '_dayControl';
export const DATE_PICKER_MONTH_CONTROL_ID_EXTENSION = '_monthControl';
export const DATE_PICKER_YEAR_CONTROL_ID_EXTENSION = '_yearControl';
export const DATE_PICKER_LABELS_EN = ['Day', 'Month', 'Year'];
export const DATE_PICKER_LABELS_FR = ['Jour', 'Mois', 'Année'];
export const DATE_PICKER_PLACEHOLDER_YEAR_EN = 'YYYY';
export const DATE_PICKER_PLACEHOLDER_YEAR_FR = 'AAAA';
export const DATE_PICKER_PLACEHOLDER_MONTH_EN = 'Month';
export const DATE_PICKER_PLACEHOLDER_MONTH_FR = 'Mois';
export const DATE_PICKER_PLACEHOLDER_DAY_EN = 'DD';
export const DATE_PICKER_PLACEHOLDER_DAY_FR = 'JJ';
export const DATE_PICKER_UNKOWN_EN = 'Unknown';
export const DATE_PICKER_UNKOWN_FR = 'Inconnu';
export class DatePickerComponent {
    constructor(translate, standAloneFunctions) {
        this.translate = translate;
        this.standAloneFunctions = standAloneFunctions;
        this.formGroupEmpty = new FormGroup({});
        this.config = {
            id: '',
            formGroup: new FormGroup({})
        };
        this.formGroup = this.formGroupEmpty;
        this.yearSelectShow = true;
        this.monthSelectShow = true;
        this.daySelectShow = true;
        this.errorIds = [];
        this.days = [];
        this.months = [];
        this.labelConfig = {
            formGroup: this.config.formGroup,
            parentID: ''
        };
        this.touched = false;
        this.errorStubText = '';
        this.dropDownConfigs = {
            day: {
                id: '',
                formGroup: this.config.formGroup,
                label: '',
                options: [],
                size: 'large',
                disableError: true
            },
            month: {
                id: '',
                formGroup: this.config.formGroup,
                label: '',
                options: [],
                size: 'large',
                disableError: true
            },
            year: {
                id: '',
                formGroup: this.config.formGroup,
                label: '',
                options: [],
                size: 'large',
                disableError: true
            }
        };
        this.yearSelect = '';
        this.monthSelect = '';
        this.daySelect = '';
        //Get the current year for use in the year dropdown
        this.currentYear = new Date().getFullYear();
        this.onTouch = () => {
            if (this.formGroup?.get(this.config.id)?.touched === false) {
                this.formGroup?.get(this.config.id)?.markAsTouched();
            }
        };
        this.onChange = (value) => {
            this.config.formGroup.get(this.config.id)?.setValue(value);
        };
    }
    ngOnInit() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        //set config from individual options, if present
        if (this.formGroup !== this.formGroupEmpty) {
            this.config.formGroup = this.formGroup;
        }
        ;
        if (this.id)
            this.config.id = this.id;
        if (this.size)
            this.config.size = this.size;
        if (this.label)
            this.config.label = this.label;
        if (this.required)
            this.config.required = this.required;
        if (this.hint)
            this.config.hint = this.hint;
        if (this.desc)
            this.config.desc = this.desc;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
        if (this.maxYear)
            this.config.maxYear = this.maxYear;
        if (this.minYear)
            this.config.minYear = this.minYear;
        if (this.unknownDateToggle)
            this.config.unknownDateToggle = this.unknownDateToggle;
        if (this.yearSelectShow)
            this.config.yearSelectShow = this.yearSelectShow;
        if (this.monthSelectShow)
            this.config.monthSelectShow = this.monthSelectShow;
        if (this.daySelectShow)
            this.config.daySelectShow = this.daySelectShow;
        //Set the ids for the dropdowns
        this.dropDownConfigs.day.id =
            this.config.id + DATE_PICKER_DAY_CONTROL_ID_EXTENSION;
        this.dropDownConfigs.month.id =
            this.config.id + DATE_PICKER_MONTH_CONTROL_ID_EXTENSION;
        this.dropDownConfigs.year.id =
            this.config.id + DATE_PICKER_YEAR_CONTROL_ID_EXTENSION;
        this.dropDownConfigs.day.formGroup = this.config.formGroup;
        this.dropDownConfigs.month.formGroup = this.config.formGroup;
        this.dropDownConfigs.year.formGroup = this.config.formGroup;
        this.dropDownConfigs.day.size = this.config.size;
        this.dropDownConfigs.month.size = this.config.size;
        this.dropDownConfigs.year.size = this.config.size;
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id + DATE_PICKER_YEAR_CONTROL_ID_EXTENSION, this.config.errorMessages);
        }
        // Populate the months and years arrays
        this.setMonthsLanguage();
        this.setLabelLanguage();
        this.translate.onLangChange.subscribe(() => {
            this.setMonthsLanguage();
            this.setYearDayLanguage();
            this.setLabelLanguage();
            this.getAriaOverride();
        });
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            if (this.config.unknownDateToggle?.yearUnknown)
                this.dropDownConfigs.year.options?.push({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
        }
        else {
            if (this.config.unknownDateToggle?.yearUnknown)
                this.dropDownConfigs.year.options?.push({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
        }
        if (this.config.minYear || this.config.maxYear) {
            if (this.config.minYear && this.config.maxYear) {
                for (let i = this.config.minYear; i <= this.config.maxYear; i++) {
                    this.dropDownConfigs.year.options?.push({ text: i.toString() });
                }
            }
            else if (this.config.minYear && !this.config.maxYear) {
                for (let i = this.config.minYear; i <= this.currentYear; i++) {
                    this.dropDownConfigs.year.options?.push({ text: i.toString() });
                }
            }
            else if (this.config.maxYear && !this.config.minYear) {
                for (let i = 1900; i <= this.config.maxYear; i++) {
                    this.dropDownConfigs.year.options?.push({ text: i.toString() });
                }
            }
        }
        else {
            for (let i = 1900; i <= this.currentYear; i++) {
                this.dropDownConfigs.year.options?.push({ text: i.toString() });
            }
        }
        // Populate the days array based on the selected month and year
        this.config.formGroup
            .get(this.config.id + DATE_PICKER_MONTH_CONTROL_ID_EXTENSION)
            ?.valueChanges.subscribe((month) => {
            //add if statement here - the value of year can be empty, since it may not have been selected yet.
            const numDays = this.updateDaysArray(month, this.config.formGroup.get(this.config.id + '_yearControl')?.value);
        });
        this.config.formGroup
            .get(this.config.id + DATE_PICKER_YEAR_CONTROL_ID_EXTENSION)
            ?.valueChanges.subscribe((year) => {
            const numDays = this.updateDaysArray(this.config.formGroup.get(this.config.id + DATE_PICKER_MONTH_CONTROL_ID_EXTENSION)?.value, year);
        });
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.push({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
        }
        else {
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.push({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
        }
        if ((this.config.unknownDateToggle?.dayUnknown &&
            this.dropDownConfigs.day.options?.length === 1) ||
            (!this.config.unknownDateToggle?.dayUnknown &&
                this.dropDownConfigs.day.options?.length === 0)) {
            for (let i = 1; i <= 31; i++) {
                this.dropDownConfigs.day.options?.push({ text: i.toString() });
            }
        }
    }
    ngOnChanges() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, [], this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        this.dropDownConfigs.day.size = this.config.size;
        this.dropDownConfigs.month.size = this.config.size;
        this.dropDownConfigs.year.size = this.config.size;
    }
    ngAfterViewInit() {
        this.yearSelect = document.getElementById(this.dropDownConfigs.year.id);
        this.monthSelect = document.getElementById(this.dropDownConfigs.month.id);
        this.daySelect = document.getElementById(this.dropDownConfigs.day.id);
        this.getAriaOverride();
    }
    /**
     * Set the language for dropdown options
     * TODO: Set value of each month to be the lov and not the text
     */
    setMonthsLanguage() {
        this.dropDownConfigs.month.options = [];
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            this.months = DATE_PICKER_MONTHS_EN;
            if (this.config.unknownDateToggle?.monthUnknown)
                this.dropDownConfigs.month.options?.push({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
        }
        else {
            this.months = DATE_PICKER_MONTHS_FR;
            if (this.config.unknownDateToggle?.monthUnknown)
                this.dropDownConfigs.month.options?.push({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
        }
        this.months.forEach((month, index) => {
            this.dropDownConfigs.month.options?.push({
                text: month,
                value: (index + 1).toString().padStart(2, '0')
            });
        });
    }
    /**
     * Used to set the language of year/day 'unknown' field when langauge changes
     */
    setYearDayLanguage() {
        this.dropDownConfigs.day.options?.shift();
        this.dropDownConfigs.year.options?.shift();
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            this.months = DATE_PICKER_MONTHS_EN;
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.unshift({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
            if (this.config.unknownDateToggle?.yearUnknown)
                this.dropDownConfigs.year.options?.unshift({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
        }
        else {
            this.months = DATE_PICKER_MONTHS_FR;
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.unshift({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
            if (this.config.unknownDateToggle?.yearUnknown)
                this.dropDownConfigs.year.options?.unshift({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
        }
    }
    /**
     * Set the language for the labels of each dropdown
     */
    setLabelLanguage() {
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            this.dropDownConfigs.day.label = DATE_PICKER_LABELS_EN[0];
            this.dropDownConfigs.month.label = DATE_PICKER_LABELS_EN[1];
            this.dropDownConfigs.year.label = DATE_PICKER_LABELS_EN[2];
            this.dropDownConfigs.day.placeholder = DATE_PICKER_PLACEHOLDER_DAY_EN;
            this.dropDownConfigs.month.placeholder = DATE_PICKER_PLACEHOLDER_MONTH_EN;
            this.dropDownConfigs.year.placeholder = DATE_PICKER_PLACEHOLDER_YEAR_EN;
            this.errorStubText = ERROR_TEXT_STUB.en;
        }
        else {
            this.dropDownConfigs.day.label = DATE_PICKER_LABELS_FR[0];
            this.dropDownConfigs.month.label = DATE_PICKER_LABELS_FR[1];
            this.dropDownConfigs.year.label = DATE_PICKER_LABELS_FR[2];
            this.dropDownConfigs.day.placeholder = DATE_PICKER_PLACEHOLDER_DAY_FR;
            this.dropDownConfigs.month.placeholder = DATE_PICKER_PLACEHOLDER_MONTH_FR;
            this.dropDownConfigs.year.placeholder = DATE_PICKER_PLACEHOLDER_YEAR_FR;
            this.errorStubText = ERROR_TEXT_STUB.fr;
        }
    }
    /**
     * update the days array with the correct number of days based on the year and the month
     * @param month string of the month (TODO: Change this to be an LOV)
     * @param year year selected
     */
    updateDaysArray(month, year) {
        this.days = [];
        this.dropDownConfigs.day.options = [];
        const numDays = this.getNumDaysInMonth(month, year);
        for (let i = 1; i <= numDays; i++) {
            this.days.push(i);
        }
        this.config.formGroup
            .get(this.config.id + DATE_PICKER_DAY_CONTROL_ID_EXTENSION)
            ?.setValue('');
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.push({
                    text: DATE_PICKER_UNKOWN_EN,
                    value: '**'
                });
        }
        else {
            if (this.config.unknownDateToggle?.dayUnknown)
                this.dropDownConfigs.day.options?.push({
                    text: DATE_PICKER_UNKOWN_FR,
                    value: '**'
                });
        }
        this.days.forEach((day) => {
            this.dropDownConfigs.day.options?.push({ text: day.toString() });
        });
    }
    /**
     * Get the number of days in the month based on the month and year
     * @param month string of the month selected
     * @param year number selected
     * @returns number representing the number of days in the month
     */
    getNumDaysInMonth(month, year) {
        const monthNum = +month;
        if (monthNum === 2) {
            if (String(year) === '**') {
                //if year is unknown and month is feb return 29
                return 29;
            }
            return this.isLeapYear(year) ? 29 : 28;
        }
        else if ([4, 6, 9, 11].includes(monthNum)) {
            return 30;
        }
        else {
            return 31;
        }
    }
    /**
     * Check if the year is a leap year
     * @param year number representing the year
     * @returns true if a leap year, false otherwise
     */
    isLeapYear(year) {
        if (year % 4 === 0) {
            if (year % 100 === 0) {
                return year % 400 === 0;
            }
            return true;
        }
        return false;
    }
    getDatePickerTouchedOrInvalid() {
        let datePickerState = false;
        datePickerState =
            (this.config.formGroup.get(this.dropDownConfigs.year.id)?.touched &&
                this.config.formGroup.get(this.dropDownConfigs.year.id)?.invalid) ||
                (this.config.formGroup.get(this.dropDownConfigs.month.id)?.touched &&
                    this.config.formGroup.get(this.dropDownConfigs.month.id)?.invalid) ||
                (this.config.formGroup.get(this.dropDownConfigs.day.id)?.touched &&
                    this.config.formGroup.get(this.dropDownConfigs.day.id)?.invalid);
        this.touched = datePickerState || false;
        this.getAriaOverride(datePickerState);
        return datePickerState ?? false;
        //  return this.config.formGroup?.touched && this.config.formGroup?.invalid;
    }
    /**
     * Override the aria labels for each of the select fields in the date picker
     * @param hasError is the field in error?
     */
    getAriaOverride(hasError) {
        if (this.yearSelect !== '') {
            if (hasError &&
                this.config.formGroup.get(this.dropDownConfigs.year.id)?.touched &&
                this.config.formGroup.get(this.dropDownConfigs.year.id)?.invalid) {
                this.yearSelect?.setAttribute('aria-label', this.getLabelCore() +
                    this.dropDownConfigs.year.label +
                    ' ' +
                    this.getErrorAria());
            }
            else {
                this.yearSelect?.setAttribute('aria-label', this.getLabelCore() + this.dropDownConfigs.year.label);
            }
        }
        if (this.monthSelect !== '') {
            if (hasError &&
                this.config.formGroup.get(this.dropDownConfigs.month.id)?.touched &&
                this.config.formGroup.get(this.dropDownConfigs.month.id)?.invalid) {
                this.monthSelect?.setAttribute('aria-label', this.getLabelCore() +
                    this.dropDownConfigs.month.label +
                    ' ' +
                    this.getErrorAria());
            }
            else {
                this.monthSelect?.setAttribute('aria-label', this.getLabelCore() + this.dropDownConfigs.month.label);
            }
        }
        if (this.daySelect !== '') {
            if (hasError &&
                this.config.formGroup.get(this.dropDownConfigs.day.id)?.touched &&
                this.config.formGroup.get(this.dropDownConfigs.day.id)?.invalid) {
                this.daySelect?.setAttribute('aria-label', this.getLabelCore() +
                    this.dropDownConfigs.day.label +
                    ' ' +
                    this.getErrorAria());
            }
            else {
                this.daySelect?.setAttribute('aria-label', this.getLabelCore() + this.dropDownConfigs.day.label);
            }
        }
    }
    /**
     * Generates a core string of the label (date picker label, description, and hint) for aria text
     * @returns label core text translated string
     */
    getLabelCore() {
        let labelCore = '';
        if (this.config.label)
            labelCore += this.translate.instant(this.config.label) + ' ';
        if (this.config.desc)
            labelCore += this.translate.instant(this.config.desc) + ' ';
        if (this.config.hint)
            labelCore += this.translate.instant(this.config.hint) + ' ';
        return labelCore;
    }
    /**
     * Generates the translated error string for aria text
     * @returns errors text translated string
     */
    getErrorAria() {
        let errors = '';
        this.errorIds.forEach((error) => {
            errors += this.translate.instant(error.errorLOV) + ' ';
        });
        return errors;
    }
    changeValue(event) {
        this.writeValue(event.srcElement.value);
        this.onTouch();
    }
    writeValue(value) {
        this.onChange(value);
    }
    registerOnChange(fn) {
        this.config.formGroup.valueChanges.subscribe(fn);
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * Apply a disabled state
     */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formGroup?.get(this.config.id)?.disable();
        }
        else {
            this.formGroup?.get(this.config.id)?.enable();
        }
    }
}
DatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: DatePickerComponent, deps: [{ token: i1.TranslateService }, { token: i2.StandAloneFunctions }], target: i0.ɵɵFactoryTarget.Component });
DatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: DatePickerComponent, selector: "ircc-cl-lib-date-picker", inputs: { config: "config", formGroup: "formGroup", id: "id", size: "size", label: "label", required: "required", hint: "hint", desc: "desc", errorMessages: "errorMessages", maxYear: "maxYear", minYear: "minYear", unknownDateToggle: "unknownDateToggle", yearSelectShow: "yearSelectShow", monthSelectShow: "monthSelectShow", daySelectShow: "daySelectShow" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DatePickerComponent),
            multi: true
        }
    ], usesOnChanges: true, ngImport: i0, template: "<div class=\"{{ config.size }}\">\n  <ircc-cl-lib-label\n    [config]=\"labelConfig\"\n    [attr.size]=\"config.size\"\n  ></ircc-cl-lib-label>\n  <fieldset class=\"all-select-container\">\n    <ircc-cl-lib-select\n      class=\"select-year\"\n      [attr.aria-live]=\"'off'\"\n      [config]=\"dropDownConfigs.year\"\n      *ngIf=\"config.yearSelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n    <ircc-cl-lib-select\n      class=\"select-month\"\n      [config]=\"dropDownConfigs.month\"\n      *ngIf=\"config.monthSelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n    <ircc-cl-lib-select\n      class=\"select-day\"\n      [config]=\"dropDownConfigs.day\"\n      *ngIf=\"config.daySelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n  </fieldset>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"getDatePickerTouchedOrInvalid()\">\n      <span class=\"sr-only\">{{\n        errorStubText + ': ' + (config.label || '' | translate) + ': '\n      }}</span>\n      <!-- TODO: Do something clever here to add which of the dropdowns are in error and put them in the above p tag -->\n      <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n        <div\n          *ngIf=\"config.formGroup.get(dropDownConfigs.year.id)?.errors?.[errors.key] || config.formGroup.get(dropDownConfigs.month.id)?.errors?.[errors.key] || config.formGroup.get(dropDownConfigs.day.id)?.errors?.[errors.key]\"\n          class=\"radio-errors\"\n        >\n          <ircc-cl-lib-error\n            [id]=\"errors.id\"\n            [errorLOV]=\"errors.errorLOV\"\n            [size]=\"config.size\"\n          ></ircc-cl-lib-error>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "component", type: i5.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "component", type: i6.SelectComponent, selector: "ircc-cl-lib-select", inputs: ["config", "id", "formGroup", "size", "label", "desc", "hint", "placeholder", "required", "options", "errorMessages", "disableError"] }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: DatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-date-picker', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DatePickerComponent),
                            multi: true
                        }
                    ], template: "<div class=\"{{ config.size }}\">\n  <ircc-cl-lib-label\n    [config]=\"labelConfig\"\n    [attr.size]=\"config.size\"\n  ></ircc-cl-lib-label>\n  <fieldset class=\"all-select-container\">\n    <ircc-cl-lib-select\n      class=\"select-year\"\n      [attr.aria-live]=\"'off'\"\n      [config]=\"dropDownConfigs.year\"\n      *ngIf=\"config.yearSelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n    <ircc-cl-lib-select\n      class=\"select-month\"\n      [config]=\"dropDownConfigs.month\"\n      *ngIf=\"config.monthSelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n    <ircc-cl-lib-select\n      class=\"select-day\"\n      [config]=\"dropDownConfigs.day\"\n      *ngIf=\"config.daySelectShow\"\n      (change)=\"changeValue($event)\"\n    ></ircc-cl-lib-select>\n  </fieldset>\n  <div aria-live=\"polite\">\n    <ng-container *ngIf=\"getDatePickerTouchedOrInvalid()\">\n      <span class=\"sr-only\">{{\n        errorStubText + ': ' + (config.label || '' | translate) + ': '\n      }}</span>\n      <!-- TODO: Do something clever here to add which of the dropdowns are in error and put them in the above p tag -->\n      <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n        <div\n          *ngIf=\"config.formGroup.get(dropDownConfigs.year.id)?.errors?.[errors.key] || config.formGroup.get(dropDownConfigs.month.id)?.errors?.[errors.key] || config.formGroup.get(dropDownConfigs.day.id)?.errors?.[errors.key]\"\n          class=\"radio-errors\"\n        >\n          <ircc-cl-lib-error\n            [id]=\"errors.id\"\n            [errorLOV]=\"errors.errorLOV\"\n            [size]=\"config.size\"\n          ></ircc-cl-lib-error>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.StandAloneFunctions }]; }, propDecorators: { config: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], id: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], required: [{
                type: Input
            }], hint: [{
                type: Input
            }], desc: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], minYear: [{
                type: Input
            }], unknownDateToggle: [{
                type: Input
            }], yearSelectShow: [{
                type: Input
            }], monthSelectShow: [{
                type: Input
            }], daySelectShow: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,