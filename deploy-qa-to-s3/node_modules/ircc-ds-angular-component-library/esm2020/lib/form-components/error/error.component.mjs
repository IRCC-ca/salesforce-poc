import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../shared/icon/icon.component";
import * as i3 from "@ngx-translate/core";
export class ErrorComponent {
    constructor() { }
    ngOnInit() {
        //Initial null and override check:
        if (!this.config)
            this.config = {
                id: '',
                errorLOV: ''
            };
        this.portInputValues();
    }
    ngOnChanges(changes) {
        this.portInputValues();
    }
    portInputValues() {
        if (this.config) {
            if (this.id)
                this.config.id = this.id;
            if (this.errorLOV)
                this.config.errorLOV = this.errorLOV;
            if (this.icon)
                this.config.icon = this.icon;
            if (this.size)
                this.config.size = this.size;
            this.iconConfig = {
                FA_keywords: this.config.icon?.class ?? 'fa-light fa-circle-exclamation',
                size: this.config.size
            };
        }
    }
}
ErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: ErrorComponent, selector: "ircc-cl-lib-error", inputs: { config: "config", id: "id", errorLOV: "errorLOV", icon: "icon", size: "size" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"{{ config?.size }} errorComponent\"\n  id=\"{{ config?.id }}\"\n  [ngClass]=\"{ errorContainer: config?.id?.endsWith('error0') }\"\n>\n  <ircc-cl-lib-icon\n    *ngIf=\"config?.id?.endsWith('error0') && iconConfig\"\n    [config]=\"iconConfig\"\n    class=\"errorIcon\"\n  ></ircc-cl-lib-icon>\n  <p\n    [ngClass]=\"{ additionalError: !config?.id?.endsWith('error0') }\"\n    class=\"errorText\"\n  >\n    {{ config?.errorLOV || '' | translate }}\n  </p>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.IconComponent, selector: "ircc-cl-lib-icon", inputs: ["config", "ariaLabel", "FA_keywords", "size"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: ErrorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-error', template: "<div\n  class=\"{{ config?.size }} errorComponent\"\n  id=\"{{ config?.id }}\"\n  [ngClass]=\"{ errorContainer: config?.id?.endsWith('error0') }\"\n>\n  <ircc-cl-lib-icon\n    *ngIf=\"config?.id?.endsWith('error0') && iconConfig\"\n    [config]=\"iconConfig\"\n    class=\"errorIcon\"\n  ></ircc-cl-lib-icon>\n  <p\n    [ngClass]=\"{ additionalError: !config?.id?.endsWith('error0') }\"\n    class=\"errorText\"\n  >\n    {{ config?.errorLOV || '' | translate }}\n  </p>\n</div>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], errorLOV: [{
                type: Input
            }], icon: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50LWxpYi9zcmMvbGliL2Zvcm0tY29tcG9uZW50cy9lcnJvci9lcnJvci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvZm9ybS1jb21wb25lbnRzL2Vycm9yL2Vycm9yLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUlOLE1BQU0sZUFBZSxDQUFDOzs7OztBQW9CdkIsTUFBTSxPQUFPLGNBQWM7SUFRekIsZ0JBQWUsQ0FBQztJQUNoQixRQUFRO1FBQ04sa0NBQWtDO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUc7Z0JBQ1osRUFBRSxFQUFFLEVBQUU7Z0JBQ04sUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFDO1FBQ0osSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxlQUFlO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN0QyxJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDeEQsSUFBSSxJQUFJLENBQUMsSUFBSTtnQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzVDLElBQUksSUFBSSxDQUFDLElBQUk7Z0JBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUU1QyxJQUFJLENBQUMsVUFBVSxHQUFHO2dCQUNoQixXQUFXLEVBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLGdDQUFnQztnQkFDN0QsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSTthQUN2QixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs0R0FwQ1UsY0FBYztnR0FBZCxjQUFjLHdLQzFCM0Isa2VBaUJBOzRGRFNhLGNBQWM7a0JBSjFCLFNBQVM7K0JBQ0UsbUJBQW1COzBFQUlwQixNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csRUFBRTtzQkFBVixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRFNTaXplcyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvamwtY29tcG9uZW50cy5jb25zdGFudHMnO1xuaW1wb3J0IHsgSUljb25Db25maWcgfSBmcm9tICcuLi8uLi9zaGFyZWQvaWNvbi9pY29uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVycm9ySWNvbkNvbmZpZyB7XG4gIGNsYXNzOiBzdHJpbmc7IC8vIEZvbnRhd2Vzb21lIGljb24gY2xhc3NcbiAgY29sb3I/OiBzdHJpbmc7IC8vIGljb24gY29sb3Jcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXJyb3JDb21wb25lbnRDb25maWcge1xuICBpZDogc3RyaW5nO1xuICBlcnJvckxPVjogc3RyaW5nO1xuICBzaXplPzoga2V5b2YgdHlwZW9mIERTU2l6ZXM7XG4gIGljb24/OiBJRXJyb3JJY29uQ29uZmlnO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdpcmNjLWNsLWxpYi1lcnJvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9lcnJvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGNvbmZpZz86IElFcnJvckNvbXBvbmVudENvbmZpZztcbiAgQElucHV0KCkgaWQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGVycm9yTE9WPzogc3RyaW5nO1xuICBASW5wdXQoKSBpY29uPzogSUVycm9ySWNvbkNvbmZpZztcbiAgQElucHV0KCkgc2l6ZT86IGtleW9mIHR5cGVvZiBEU1NpemVzO1xuICBpY29uQ29uZmlnPzogSUljb25Db25maWc7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuICBuZ09uSW5pdCgpIHtcbiAgICAvL0luaXRpYWwgbnVsbCBhbmQgb3ZlcnJpZGUgY2hlY2s6XG4gICAgaWYgKCF0aGlzLmNvbmZpZylcbiAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICBpZDogJycsXG4gICAgICAgIGVycm9yTE9WOiAnJ1xuICAgICAgfTtcbiAgICB0aGlzLnBvcnRJbnB1dFZhbHVlcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHRoaXMucG9ydElucHV0VmFsdWVzKCk7XG4gIH1cblxuICBwcml2YXRlIHBvcnRJbnB1dFZhbHVlcygpIHtcbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIGlmICh0aGlzLmlkKSB0aGlzLmNvbmZpZy5pZCA9IHRoaXMuaWQ7XG4gICAgICBpZiAodGhpcy5lcnJvckxPVikgdGhpcy5jb25maWcuZXJyb3JMT1YgPSB0aGlzLmVycm9yTE9WO1xuICAgICAgaWYgKHRoaXMuaWNvbikgdGhpcy5jb25maWcuaWNvbiA9IHRoaXMuaWNvbjtcbiAgICAgIGlmICh0aGlzLnNpemUpIHRoaXMuY29uZmlnLnNpemUgPSB0aGlzLnNpemU7XG5cbiAgICAgIHRoaXMuaWNvbkNvbmZpZyA9IHtcbiAgICAgICAgRkFfa2V5d29yZHM6XG4gICAgICAgICAgdGhpcy5jb25maWcuaWNvbj8uY2xhc3MgPz8gJ2ZhLWxpZ2h0IGZhLWNpcmNsZS1leGNsYW1hdGlvbicsXG4gICAgICAgIHNpemU6IHRoaXMuY29uZmlnLnNpemVcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2XG4gIGNsYXNzPVwie3sgY29uZmlnPy5zaXplIH19IGVycm9yQ29tcG9uZW50XCJcbiAgaWQ9XCJ7eyBjb25maWc/LmlkIH19XCJcbiAgW25nQ2xhc3NdPVwieyBlcnJvckNvbnRhaW5lcjogY29uZmlnPy5pZD8uZW5kc1dpdGgoJ2Vycm9yMCcpIH1cIlxuPlxuICA8aXJjYy1jbC1saWItaWNvblxuICAgICpuZ0lmPVwiY29uZmlnPy5pZD8uZW5kc1dpdGgoJ2Vycm9yMCcpICYmIGljb25Db25maWdcIlxuICAgIFtjb25maWddPVwiaWNvbkNvbmZpZ1wiXG4gICAgY2xhc3M9XCJlcnJvckljb25cIlxuICA+PC9pcmNjLWNsLWxpYi1pY29uPlxuICA8cFxuICAgIFtuZ0NsYXNzXT1cInsgYWRkaXRpb25hbEVycm9yOiAhY29uZmlnPy5pZD8uZW5kc1dpdGgoJ2Vycm9yMCcpIH1cIlxuICAgIGNsYXNzPVwiZXJyb3JUZXh0XCJcbiAgPlxuICAgIHt7IGNvbmZpZz8uZXJyb3JMT1YgfHwgJycgfCB0cmFuc2xhdGUgfX1cbiAgPC9wPlxuPC9kaXY+XG4iXX0=