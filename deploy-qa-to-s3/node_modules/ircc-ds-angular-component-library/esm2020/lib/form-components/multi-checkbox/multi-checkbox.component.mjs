import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../../../public-api";
import * as i2 from "../../../shared/functions/stand-alone.functions";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/label/label.component";
import * as i5 from "../checkbox/checkbox.component";
import * as i6 from "../error/error.component";
import * as i7 from "@ngx-translate/core";
export class MultiCheckboxComponent {
    constructor(multiCheckboxService, standAloneFunctions) {
        this.multiCheckboxService = multiCheckboxService;
        this.standAloneFunctions = standAloneFunctions;
        this.form = new FormGroup({});
        this.errorIds = [];
        this.config = {
            id: '',
            label: {
                parentID: '',
                formGroup: this.form
            },
            errorMessages: []
        };
        this.id = '';
        /**
         * Accumulates all the errors on parents and children checkboxes
         * @type IErrorPairsMultiCheckBox[]
         */
        this.errorMessagesAccumulator = [];
        /**
         * Accumulates unique error types and used in the frontend to display
         * @type IErrorPairsMultiCheckBox[]
         */
        this.errorMessagesAccumulatorUniqueType = [];
        this.disabledStatus = false;
        this.groupCheckbox = true;
        if (this.id !== '')
            this.config.id = this.id;
        if (this.parent)
            this.config.parent = this.parent;
        if (this.children)
            this.config.children = this.children;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
    }
    // returns size depending on if its group or multicheckbox
    get size() {
        if (this.groupCheckbox && this.config.children) {
            return this.config?.children[0]?.size || 'large';
        }
        return this.config.parent?.size || 'large';
    }
    ngOnInit() {
        //errorChecking
        this.checkErrorsSubscription();
        this.errorSub = this.multiCheckboxService.multiCheckboxErrorObs$.subscribe((response) => {
            if (this.config.children) {
                let children = this.config.children?.findIndex((child) => {
                    return child.id === response;
                });
                if (children > -1) {
                    this.checkError(this.config?.children[children]?.formGroup?.get(response)?.status, this.config?.children[children]?.formGroup || new FormGroup({}), response);
                }
            }
            if (this.config?.parent?.id === response) {
                this.checkError(this.config?.parent?.formGroup?.get(response)?.status, this.config?.parent?.formGroup || new FormGroup({}), response);
            }
        });
        if (this.config.parent !== undefined) {
            this.groupCheckbox = false;
            this.configSub =
                this.multiCheckboxService.multiCheckboxEventObs$.subscribe((response) => {
                    if (this.config.children) {
                        if (response.id === this.config.parent?.id) {
                            this.config.children?.forEach((res) => {
                                this.multiCheckboxService.checkEvent({
                                    id: res.id,
                                    event: response.event
                                });
                            });
                            this.config.parent.mixed = false;
                            this.checkError(this.config?.parent?.formGroup?.get(this.config.parent?.id)
                                ?.status, this.config?.parent?.formGroup || new FormGroup({}), this.config.parent?.id);
                            this.config.children?.forEach((res) => {
                                this.checkError(this.config?.parent?.formGroup?.get(res.id)?.status, this.config?.parent?.formGroup || new FormGroup({}), res.id);
                            });
                        }
                        else if (this.config.children?.findIndex((child) => {
                            return child.id === response.id;
                        }) > -1) {
                            let positive = 0;
                            let negative = 0;
                            this.config.children?.forEach((res) => {
                                res.formGroup.get(res.id)?.value === true
                                    ? positive++
                                    : negative++;
                            });
                            if (positive > 0 && negative > 0) {
                                this.config.parent?.formGroup
                                    .get(this.config.parent?.id)
                                    ?.patchValue(true, { emitEvent: false });
                                this.config.parent.mixed = true;
                            }
                            else if (positive > 0 && negative == 0) {
                                this.config.parent?.formGroup
                                    .get(this.config.parent?.id)
                                    ?.patchValue(true, { emitEvent: false });
                                this.config.parent.mixed = false;
                            }
                            else if (positive == 0 && negative > 0) {
                                this.config.parent?.formGroup
                                    .get(this.config.parent?.id)
                                    ?.patchValue(false, { emitEvent: false });
                                this.config.parent.mixed = false;
                            }
                            this.checkError(this.config?.parent?.formGroup?.get(this.config.parent?.id)
                                ?.status, this.config.parent?.formGroup || new FormGroup({}), this.config.parent?.id || '');
                            this.config.children?.forEach((res) => {
                                this.checkError(this.config?.parent?.formGroup?.get(res.id)?.status, this.config?.parent?.formGroup || new FormGroup({}), res.id);
                            });
                        }
                    }
                });
        }
    }
    checkErrorsSubscription() {
        this.config.children?.forEach((res) => {
            res.formGroup?.get(res.id)?.statusChanges.subscribe((value) => {
                this.checkError(value, res.formGroup, res.id);
                value === 'DISABLED'
                    ? (this.disabledStatus = true)
                    : (this.disabledStatus = false);
            });
        });
        if (this.config.parent !== undefined) {
            this.config.parent.formGroup
                ?.get(this.config.parent.id)
                ?.statusChanges.subscribe((value) => {
                this.checkError(value, this.config?.parent?.formGroup || new FormGroup({}), this.config?.parent?.id || '');
                value === 'DISABLED'
                    ? (this.disabledStatus = true)
                    : (this.disabledStatus = false);
                this.config.children?.forEach((res) => {
                    res.formGroup
                        ?.get(res.id)
                        ?.statusChanges.subscribe((value) => {
                        this.checkError(value, res.formGroup, res.id);
                        value === 'DISABLED'
                            ? (this.disabledStatus = true)
                            : (this.disabledStatus = false);
                    });
                });
            });
        }
    }
    /**
     * Will check the status of a formcontrol.  If the control is not in a valid status, it will loop through the errors
     * and add them to this.errorMessages.
     * @param value Status of the formcontrol
     * @param group - Formgroup to be checked
     * @param id - ID of the control that is being checked for error in the formgroup
     */
    checkError(value, group, id) {
        if (value !== 'VALID') {
            for (const error in group.get(id)?.errors) {
                let errorIndex = this.config.errorMessages?.findIndex((errorPair) => {
                    return errorPair.key === error;
                });
                let errorMessagesKeys = this.errorMessagesAccumulator?.findIndex((errorPair) => {
                    return errorPair.key === error && id === errorPair.id;
                });
                if (errorIndex > -1 && errorMessagesKeys === -1) {
                    this.errorMessagesAccumulator.push({
                        id: id,
                        key: this.config.errorMessages[errorIndex].key,
                        errorLOV: this.config.errorMessages[errorIndex].errorLOV
                    });
                }
                this.filterErrorList();
            }
        }
        else {
            this.errorMessagesAccumulator = this.errorMessagesAccumulator.filter((errorPair) => {
                return (errorPair.id)?.replace('_error0', '') !== id;
            });
            this.filterErrorList();
        }
    }
    /**
     * Will loop through the errors in the variable errorMessages.
     * It will then add a copy in errorMessagesAccumulator for each unique error type.
     * THe first error in errorMessagesAccumulator will get _error0 appended to it's ID to display the icon
     */
    filterErrorList() {
        this.errorMessagesAccumulatorUniqueType = [];
        this.errorMessagesAccumulator.forEach((error) => {
            let errorIndex = this.errorMessagesAccumulatorUniqueType.findIndex((errorPair) => {
                return errorPair.key === error.key;
            });
            if (errorIndex === -1) {
                this.errorMessagesAccumulatorUniqueType.push(error);
            }
        });
        if (this.errorMessagesAccumulatorUniqueType[0]) {
            if (this.errorMessagesAccumulatorUniqueType[0].id && !this.errorMessagesAccumulatorUniqueType[0].id.endsWith("_error0")) {
                this.errorMessagesAccumulatorUniqueType[0].id = this.errorMessagesAccumulatorUniqueType[0].id + "_error0";
            }
        }
    }
    isValid(checkbox) {
        return typeof checkbox !== 'undefined';
    }
    removeResponseFromError(response) {
        this.config.errorMessages = this.config.errorMessages.filter((item) => {
            item?.key !== response.id;
        });
    }
}
MultiCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MultiCheckboxComponent, deps: [{ token: i1.MultiCheckboxService }, { token: i2.StandAloneFunctions }], target: i0.ɵɵFactoryTarget.Component });
MultiCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: MultiCheckboxComponent, selector: "ircc-cl-lib-multi-checkbox", inputs: { config: "config", id: "id", parent: "parent", children: "children", errorMessages: "errorMessages" }, ngImport: i0, template: "<fieldset>\n  <legend class=\"visually-hidden\">\n    {{ config.label.label || '' | translate }}\n  </legend>\n  <ng-container *ngIf=\"config.label\">\n    <ircc-cl-lib-label\n      [config]=\"config.label\"\n      [legend]=\"true\"\n      [attr.size]=\"size\"\n    ></ircc-cl-lib-label>\n  </ng-container>\n  <div class=\"parent-checkbox\">\n    <ng-container *ngIf=\"config.parent; else group\">\n      <ircc-cl-lib-checkbox [config]=\"config.parent\"></ircc-cl-lib-checkbox>\n      <ng-container *ngFor=\"let child of config.children\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            recursiveListTmpl;\n            context: { checkBoxConfig: child }\n          \"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #group>\n    <ng-container *ngFor=\"let child of config.children\">\n      <ircc-cl-lib-checkbox [config]=\"child\"></ircc-cl-lib-checkbox>\n    </ng-container>\n  </ng-template>\n\n  <ng-template\n    #recursiveListTmpl\n    let-checkBoxConfig=\"checkBoxConfig\"\n  >\n    <div class=\"child-checkbox\">\n      <ircc-cl-lib-checkbox [config]=\"checkBoxConfig\"></ircc-cl-lib-checkbox>\n    </div>\n  </ng-template>\n  <ng-container\n    *ngFor=\"let errors of errorMessagesAccumulatorUniqueType; let i = index\"\n  >\n    <div\n      *ngIf=\"errorMessagesAccumulatorUniqueType.length > -1 && !disabledStatus\"\n      class=\"radio-errors\"\n    >\n      <ircc-cl-lib-error\n        [id]=\"errors.id\"\n        [errorLOV]=\"errors.errorLOV\"\n        [attr.size]=\"size\"\n      ></ircc-cl-lib-error>\n    </div>\n  </ng-container>\n</fieldset>\n", styles: [".parent-checkbox{min-height:55px;margin-right:32px}.child-checkbox{margin-left:20px}.visually-hidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}fieldset{border:none}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "component", type: i5.CheckboxComponent, selector: "ircc-cl-lib-checkbox", inputs: ["config", "formGroup", "id", "label", "required", "size", "mixed", "inlineLabel", "inlineLabelBold", "hint", "desc", "errorMessages"] }, { kind: "component", type: i6.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "pipe", type: i7.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MultiCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-multi-checkbox', template: "<fieldset>\n  <legend class=\"visually-hidden\">\n    {{ config.label.label || '' | translate }}\n  </legend>\n  <ng-container *ngIf=\"config.label\">\n    <ircc-cl-lib-label\n      [config]=\"config.label\"\n      [legend]=\"true\"\n      [attr.size]=\"size\"\n    ></ircc-cl-lib-label>\n  </ng-container>\n  <div class=\"parent-checkbox\">\n    <ng-container *ngIf=\"config.parent; else group\">\n      <ircc-cl-lib-checkbox [config]=\"config.parent\"></ircc-cl-lib-checkbox>\n      <ng-container *ngFor=\"let child of config.children\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            recursiveListTmpl;\n            context: { checkBoxConfig: child }\n          \"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #group>\n    <ng-container *ngFor=\"let child of config.children\">\n      <ircc-cl-lib-checkbox [config]=\"child\"></ircc-cl-lib-checkbox>\n    </ng-container>\n  </ng-template>\n\n  <ng-template\n    #recursiveListTmpl\n    let-checkBoxConfig=\"checkBoxConfig\"\n  >\n    <div class=\"child-checkbox\">\n      <ircc-cl-lib-checkbox [config]=\"checkBoxConfig\"></ircc-cl-lib-checkbox>\n    </div>\n  </ng-template>\n  <ng-container\n    *ngFor=\"let errors of errorMessagesAccumulatorUniqueType; let i = index\"\n  >\n    <div\n      *ngIf=\"errorMessagesAccumulatorUniqueType.length > -1 && !disabledStatus\"\n      class=\"radio-errors\"\n    >\n      <ircc-cl-lib-error\n        [id]=\"errors.id\"\n        [errorLOV]=\"errors.errorLOV\"\n        [attr.size]=\"size\"\n      ></ircc-cl-lib-error>\n    </div>\n  </ng-container>\n</fieldset>\n", styles: [".parent-checkbox{min-height:55px;margin-right:32px}.child-checkbox{margin-left:20px}.visually-hidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}fieldset{border:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MultiCheckboxService }, { type: i2.StandAloneFunctions }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], parent: [{
                type: Input
            }], children: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50LWxpYi9zcmMvbGliL2Zvcm0tY29tcG9uZW50cy9tdWx0aS1jaGVja2JveC9tdWx0aS1jaGVja2JveC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvZm9ybS1jb21wb25lbnRzL211bHRpLWNoZWNrYm94L211bHRpLWNoZWNrYm94LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVcsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBcUIsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7OztBQWlDOUQsTUFBTSxPQUFPLHNCQUFzQjtJQTRDakMsWUFDVSxvQkFBMEMsRUFDM0MsbUJBQXdDO1FBRHZDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDM0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQTdDakQsU0FBSSxHQUFjLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBR3BDLGFBQVEsR0FBZ0IsRUFBRSxDQUFDO1FBRWxCLFdBQU0sR0FBeUI7WUFDdEMsRUFBRSxFQUFFLEVBQUU7WUFDTixLQUFLLEVBQUU7Z0JBQ0wsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ3JCO1lBQ0QsYUFBYSxFQUFFLEVBQUU7U0FDbEIsQ0FBQztRQUVPLE9BQUUsR0FBRyxFQUFFLENBQUM7UUFLakI7OztXQUdHO1FBQ0gsNkJBQXdCLEdBQStCLEVBQUUsQ0FBQztRQUUxRDs7O1dBR0c7UUFDSCx1Q0FBa0MsR0FBK0IsRUFBRSxDQUFDO1FBQ3BFLG1CQUFjLEdBQVksS0FBSyxDQUFDO1FBQ2hDLGtCQUFhLEdBQVksSUFBSSxD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dCwgRG9DaGVjaywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xTdGF0dXMsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgRFNTaXplcyxcbiAgSUNoZWNrQm94Q29tcG9uZW50Q29uZmlnLFxuICBJTGFiZWxDb25maWcsXG4gIE11bHRpQ2hlY2tib3hTZXJ2aWNlXG59IGZyb20gJy4uLy4uLy4uL3B1YmxpYy1hcGknO1xuXG5pbXBvcnQge1xuICBJRXJyb3JJRHMsXG4gIFN0YW5kQWxvbmVGdW5jdGlvbnNcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2Z1bmN0aW9ucy9zdGFuZC1hbG9uZS5mdW5jdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFcnJvclBhaXJzTXVsdGlDaGVja0JveCB7XG4gIGlkPzogc3RyaW5nO1xuICBrZXk6IHN0cmluZztcbiAgZXJyb3JMT1Y6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTXVsdGlDaGVja2JveENvbmZpZyB7XG4gIGlkOiBzdHJpbmc7XG4gIGxhYmVsOiBJTGFiZWxDb25maWc7XG4gIHBhcmVudD86IElDaGVja0JveENvbXBvbmVudENvbmZpZztcbiAgY2hpbGRyZW4/OiBJQ2hlY2tCb3hDb21wb25lbnRDb25maWdbXTtcbiAgZXJyb3JNZXNzYWdlczogSUVycm9yUGFpcnNNdWx0aUNoZWNrQm94W107XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2lyY2MtY2wtbGliLW11bHRpLWNoZWNrYm94JyxcbiAgdGVtcGxhdGVVcmw6ICcuL211bHRpLWNoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbXVsdGktY2hlY2tib3guY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIE11bHRpQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBmb3JtOiBGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHt9KTtcbiAgY29uZmlnU3ViPzogU3Vic2NyaXB0aW9uO1xuICBlcnJvclN1Yj86IFN1YnNjcmlwdGlvbjtcbiAgZXJyb3JJZHM6IElFcnJvcklEc1tdID0gW107XG5cbiAgQElucHV0KCkgY29uZmlnOiBJTXVsdGlDaGVja2JveENvbmZpZyA9IHtcbiAgICBpZDogJycsXG4gICAgbGFiZWw6IHtcbiAgICAgIHBhcmVudElEOiAnJyxcbiAgICAgIGZvcm1Hcm91cDogdGhpcy5mb3JtXG4gICAgfSxcbiAgICBlcnJvck1lc3NhZ2VzOiBbXVxuICB9O1xuXG4gIEBJbnB1dCgpIGlkID0gJyc7XG4gIEBJbnB1dCgpIHBhcmVudD8gOiBJQ2hlY2tCb3hDb21wb25lbnRDb25maWc7XG4gIEBJbnB1dCgpIGNoaWxkcmVuPyA6IElDaGVja0JveENvbXBvbmVudENvbmZpZ1tdO1xuICBASW5wdXQoKSBlcnJvck1lc3NhZ2VzPzogSUVycm9yUGFpcnNNdWx0aUNoZWNrQm94W107XG5cbiAgLyoqXG4gICAqIEFjY3VtdWxhdGVzIGFsbCB0aGUgZXJyb3JzIG9uIHBhcmVudHMgYW5kIGNoaWxkcmVuIGNoZWNrYm94ZXNcbiAgICogQHR5cGUgSUVycm9yUGFpcnNNdWx0aUNoZWNrQm94W11cbiAgICovXG4gIGVycm9yTWVzc2FnZXNBY2N1bXVsYXRvcjogSUVycm9yUGFpcnNNdWx0aUNoZWNrQm94W10gPSBbXTtcblxuICAvKipcbiAgICogQWNjdW11bGF0ZXMgdW5pcXVlIGVycm9yIHR5cGVzIGFuZCB1c2VkIGluIHRoZSBmcm9udGVuZCB0byBkaXNwbGF5XG4gICAqIEB0eXBlIElFcnJvclBhaXJzTXVsdGlDaGVja0JveFtdXG4gICAqL1xuICBlcnJvck1lc3NhZ2VzQWNjdW11bGF0b3JVbmlxdWVUeXBlOiBJRXJyb3JQYWlyc011bHRpQ2hlY2tCb3hbXSA9IFtdO1xuICBkaXNhYmxlZFN0YXR1czogYm9vbGVhbiA9IGZhbHNlO1xuICBncm91cENoZWNrYm94OiBib29sZWFuID0gdHJ1ZTtcblxuICAvLyByZXR1cm5zIHNpemUgZGVwZW5kaW5nIG9uIGlmIGl0cyBncm91cCBvciBtdWx0aWNoZWNrYm94XG5cbiAgZ2V0IHNpemUoKSA6IGtleW9mIHR5cGVvZiBEU1NpemVzIHtcbiAgICBpZih0aGlzLmdyb3VwQ2hlY2tib3ggJiYgdGhpcy5jb25maWcuY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZz8uY2hpbGRyZW5bMF0/LnNpemUgfHwgJ2xhcmdlJ1xuXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wYXJlbnQ/LnNpemUgfHwgJ2xhcmdlJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbXVsdGlDaGVja2JveFNlcnZpY2U6IE11bHRpQ2hlY2tib3hTZXJ2aWNlLFxuICAgIHB1YmxpYyBzdGFuZEFsb25lRnVuY3Rpb25zOiBTdGFuZEFsb25lRnVuY3Rpb25zXG4gICkge1xuICAgIGlmICh0aGlzLmlkICE9PSAnJykgdGhpcy5jb25maWcuaWQgPSB0aGlzLmlkO1xuICAgIGlmICh0aGlzLnBhcmVudCkgdGhpcy5jb25maWcucGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgaWYgKHRoaXMuY2hpbGRyZW4pIHRoaXMuY29uZmlnLmNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBpZiAodGhpcy5lcnJvck1lc3NhZ2VzKSB0aGlzLmNvbmZpZy5lcnJvck1lc3NhZ2VzID0gdGhpcy5lcnJvck1lc3NhZ2VzO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy9lcnJvckNoZWNraW5nXG5cbiAgICB0aGlzLmNoZWNrRXJyb3JzU3Vic2NyaXB0aW9uKCk7XG5cbiAgICB0aGlzLmVycm9yU3ViID0gdGhpcy5tdWx0aUNoZWNrYm94U2VydmljZS5tdWx0aUNoZWNrYm94RXJyb3JPYnMkLnN1YnNjcmliZShcbiAgICAgIChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuY2hpbGRyZW4pIHtcbiAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNvbmZpZy5jaGlsZHJlbj8uZmluZEluZGV4KChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmlkID09PSByZXNwb25zZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjaGlsZHJlbiA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrRXJyb3IoXG4gICAgICAgICAgICAgIHRoaXMuY29uZmlnPy5jaGlsZHJlbltjaGlsZHJlbl0/LmZvcm1Hcm91cD8uZ2V0KHJlc3BvbnNlKT8uc3RhdHVzLFxuICAgICAgICAgICAgICB0aGlzLmNvbmZpZz8uY2hpbGRyZW5bY2hpbGRyZW5dPy5mb3JtR3JvdXAgfHwgbmV3IEZvcm1Hcm91cCh7fSksXG4gICAgICAgICAgICAgIHJlc3BvbnNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25maWc/LnBhcmVudD8uaWQgPT09IHJlc3BvbnNlKSB7XG4gICAgICAgICAgdGhpcy5jaGVja0Vycm9yKFxuICAgICAgICAgICAgdGhpcy5jb25maWc/LnBhcmVudD8uZm9ybUdyb3VwPy5nZXQocmVzcG9uc2UpPy5zdGF0dXMsXG4gICAgICAgICAgICB0aGlzLmNvbmZpZz8ucGFyZW50Py5mb3JtR3JvdXAgfHwgbmV3IEZvcm1Hcm91cCh7fSksXG4gICAgICAgICAgICByZXNwb25zZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG5cbiAgICBpZiAodGhpcy5jb25maWcucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZ3JvdXBDaGVja2JveCA9IGZhbHNlXG4gICAgICB0aGlzLmNvbmZpZ1N1YiA9XG4gICAgICAgIHRoaXMubXVsdGlDaGVja2JveFNlcnZpY2UubXVsdGlDaGVja2JveEV2ZW50T2JzJC5zdWJzY3JpYmUoXG4gICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmlkID09PSB0aGlzLmNvbmZpZy5wYXJlbnQ/LmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuY2hpbGRyZW4/LmZvckVhY2goKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5tdWx0aUNoZWNrYm94U2VydmljZS5jaGVja0V2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJlcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IHJlc3BvbnNlLmV2ZW50XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXJlbnQubWl4ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tFcnJvcihcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnPy5wYXJlbnQ/LmZvcm1Hcm91cD8uZ2V0KHRoaXMuY29uZmlnLnBhcmVudD8uaWQpXG4gICAgICAgICAgICAgICAgICAgID8uc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWc/LnBhcmVudD8uZm9ybUdyb3VwIHx8IG5ldyBGb3JtR3JvdXAoe30pLFxuICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcucGFyZW50Py5pZFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5jaGlsZHJlbj8uZm9yRWFjaCgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnPy5wYXJlbnQ/LmZvcm1Hcm91cD8uZ2V0KHJlcy5pZCk/LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWc/LnBhcmVudD8uZm9ybUdyb3VwIHx8IG5ldyBGb3JtR3JvdXAoe30pLFxuICAgICAgICAgICAgICAgICAgICByZXMuaWRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuY2hpbGRyZW4/LmZpbmRJbmRleCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5pZCA9PT0gcmVzcG9uc2UuaWQ7XG4gICAgICAgICAgICAgICAgfSkgPiAtMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zaXRpdmUgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBuZWdhdGl2ZSA9IDA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5jaGlsZHJlbj8uZm9yRWFjaCgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXMuZm9ybUdyb3VwLmdldChyZXMuaWQpPy52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA/IHBvc2l0aXZlKytcbiAgICAgICAgICAgICAgICAgICAgOiBuZWdhdGl2ZSsrO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aXZlID4gMCAmJiBuZWdhdGl2ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnBhcmVudD8uZm9ybUdyb3VwXG4gICAgICAgICAgICAgICAgICAgIC5nZXQodGhpcy5jb25maWcucGFyZW50Py5pZClcbiAgICAgICAgICAgICAgICAgICAgPy5wYXRjaFZhbHVlKHRydWUsIHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnIS5wYXJlbnQhLm1peGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aXZlID4gMCAmJiBuZWdhdGl2ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXJlbnQ/LmZvcm1Hcm91cFxuICAgICAgICAgICAgICAgICAgICAuZ2V0KHRoaXMuY29uZmlnLnBhcmVudD8uaWQpXG4gICAgICAgICAgICAgICAgICAgID8ucGF0Y2hWYWx1ZSh0cnVlLCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnIS5wYXJlbnQhLm1peGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3NpdGl2ZSA9PSAwICYmIG5lZ2F0aXZlID4gMCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcucGFyZW50Py5mb3JtR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgLmdldCh0aGlzLmNvbmZpZy5wYXJlbnQ/LmlkKVxuICAgICAgICAgICAgICAgICAgICA/LnBhdGNoVmFsdWUoZmFsc2UsIHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnIS5wYXJlbnQhLm1peGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tFcnJvcihcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnPy5wYXJlbnQ/LmZvcm1Hcm91cD8uZ2V0KHRoaXMuY29uZmlnLnBhcmVudD8uaWQpXG4gICAgICAgICAgICAgICAgICAgID8uc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcucGFyZW50Py5mb3JtR3JvdXAgfHwgbmV3IEZvcm1Hcm91cCh7fSksXG4gICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXJlbnQ/LmlkIHx8ICcnXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmNoaWxkcmVuPy5mb3JFYWNoKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWc/LnBhcmVudD8uZm9ybUdyb3VwPy5nZXQocmVzLmlkKT8uc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZz8ucGFyZW50Py5mb3JtR3JvdXAgfHwgbmV3IEZvcm1Hcm91cCh7fSksXG4gICAgICAgICAgICAgICAgICAgIHJlcy5pZFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjaGVja0Vycm9yc1N1YnNjcmlwdGlvbigpIHtcbiAgICB0aGlzLmNvbmZpZy5jaGlsZHJlbj8uZm9yRWFjaCgocmVzKSA9PiB7XG4gICAgICByZXMuZm9ybUdyb3VwPy5nZXQocmVzLmlkKT8uc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5jaGVja0Vycm9yKHZhbHVlLCByZXMuZm9ybUdyb3VwLCByZXMuaWQpO1xuICAgICAgICB2YWx1ZSA9PT0gJ0RJU0FCTEVEJ1xuICAgICAgICAgID8gKHRoaXMuZGlzYWJsZWRTdGF0dXMgPSB0cnVlKVxuICAgICAgICAgIDogKHRoaXMuZGlzYWJsZWRTdGF0dXMgPSBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5wYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5jb25maWcucGFyZW50LmZvcm1Hcm91cFxuICAgICAgICA/LmdldCh0aGlzLmNvbmZpZy5wYXJlbnQuaWQpXG4gICAgICAgID8uc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLmNoZWNrRXJyb3IoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnPy5wYXJlbnQ/LmZvcm1Hcm91cCB8fCBuZXcgRm9ybUdyb3VwKHt9KSxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnPy5wYXJlbnQ/LmlkIHx8ICcnXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2YWx1ZSA9PT0gJ0RJU0FCTEVEJ1xuICAgICAgICAgICAgPyAodGhpcy5kaXNhYmxlZFN0YXR1cyA9IHRydWUpXG4gICAgICAgICAgICA6ICh0aGlzLmRpc2FibGVkU3RhdHVzID0gZmFsc2UpO1xuXG4gICAgICAgICAgdGhpcy5jb25maWcuY2hpbGRyZW4/LmZvckVhY2goKHJlcykgPT4ge1xuICAgICAgICAgICAgcmVzLmZvcm1Hcm91cFxuICAgICAgICAgICAgICA/LmdldChyZXMuaWQpXG4gICAgICAgICAgICAgID8uc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRXJyb3IodmFsdWUsIHJlcy5mb3JtR3JvdXAsIHJlcy5pZCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPT09ICdESVNBQkxFRCdcbiAgICAgICAgICAgICAgICAgID8gKHRoaXMuZGlzYWJsZWRTdGF0dXMgPSB0cnVlKVxuICAgICAgICAgICAgICAgICAgOiAodGhpcy5kaXNhYmxlZFN0YXR1cyA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaWxsIGNoZWNrIHRoZSBzdGF0dXMgb2YgYSBmb3JtY29udHJvbC4gIElmIHRoZSBjb250cm9sIGlzIG5vdCBpbiBhIHZhbGlkIHN0YXR1cywgaXQgd2lsbCBsb29wIHRocm91Z2ggdGhlIGVycm9yc1xuICAgKiBhbmQgYWRkIHRoZW0gdG8gdGhpcy5lcnJvck1lc3NhZ2VzLlxuICAgKiBAcGFyYW0gdmFsdWUgU3RhdHVzIG9mIHRoZSBmb3JtY29udHJvbFxuICAgKiBAcGFyYW0gZ3JvdXAgLSBGb3JtZ3JvdXAgdG8gYmUgY2hlY2tlZFxuICAgKiBAcGFyYW0gaWQgLSBJRCBvZiB0aGUgY29udHJvbCB0aGF0IGlzIGJlaW5nIGNoZWNrZWQgZm9yIGVycm9yIGluIHRoZSBmb3JtZ3JvdXBcbiAgICovXG4gIGNoZWNrRXJyb3IodmFsdWU6IEZvcm1Db250cm9sU3RhdHVzIHwgdW5kZWZpbmVkLCBncm91cDogRm9ybUdyb3VwLCBpZDogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSAnVkFMSUQnKSB7XG4gICAgICBmb3IgKGNvbnN0IGVycm9yIGluIGdyb3VwLmdldChpZCk/LmVycm9ycykge1xuICAgICAgICBsZXQgZXJyb3JJbmRleCA9IHRoaXMuY29uZmlnLmVycm9yTWVzc2FnZXM/LmZpbmRJbmRleCgoZXJyb3JQYWlyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yUGFpci5rZXkgPT09IGVycm9yO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlc0tleXMgPSB0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvcj8uZmluZEluZGV4KChlcnJvclBhaXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gZXJyb3JQYWlyLmtleSA9PT0gZXJyb3IgJiYgaWQgPT09IGVycm9yUGFpci5pZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGVycm9ySW5kZXggPiAtMSAmJiBlcnJvck1lc3NhZ2VzS2V5cyA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvci5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGtleTogdGhpcy5jb25maWcuZXJyb3JNZXNzYWdlc1tlcnJvckluZGV4XS5rZXksXG4gICAgICAgICAgICBlcnJvckxPVjogdGhpcy5jb25maWcuZXJyb3JNZXNzYWdlc1tlcnJvckluZGV4XS5lcnJvckxPVlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmlsdGVyRXJyb3JMaXN0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcblxuICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzQWNjdW11bGF0b3IgPSB0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvci5maWx0ZXIoXG4gICAgICAgIChlcnJvclBhaXIpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIChlcnJvclBhaXIuaWQpPy5yZXBsYWNlKCdfZXJyb3IwJywgJycpICE9PSBpZFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5maWx0ZXJFcnJvckxpc3QoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBsb29wIHRocm91Z2ggdGhlIGVycm9ycyBpbiB0aGUgdmFyaWFibGUgZXJyb3JNZXNzYWdlcy5cbiAgICogSXQgd2lsbCB0aGVuIGFkZCBhIGNvcHkgaW4gZXJyb3JNZXNzYWdlc0FjY3VtdWxhdG9yIGZvciBlYWNoIHVuaXF1ZSBlcnJvciB0eXBlLlxuICAgKiBUSGUgZmlyc3QgZXJyb3IgaW4gZXJyb3JNZXNzYWdlc0FjY3VtdWxhdG9yIHdpbGwgZ2V0IF9lcnJvcjAgYXBwZW5kZWQgdG8gaXQncyBJRCB0byBkaXNwbGF5IHRoZSBpY29uXG4gICAqL1xuICBmaWx0ZXJFcnJvckxpc3QoKSB7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VzQWNjdW11bGF0b3JVbmlxdWVUeXBlID0gW107XG5cbiAgICB0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvci5mb3JFYWNoKChlcnJvcikgPT4ge1xuICAgICAgbGV0IGVycm9ySW5kZXggPSB0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvclVuaXF1ZVR5cGUuZmluZEluZGV4KChlcnJvclBhaXIpID0+IHtcbiAgICAgICAgcmV0dXJuIGVycm9yUGFpci5rZXkgPT09IGVycm9yLmtleTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3JJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzQWNjdW11bGF0b3JVbmlxdWVUeXBlLnB1c2goZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBpZih0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvclVuaXF1ZVR5cGVbMF0pe1xuICAgICAgaWYodGhpcy5lcnJvck1lc3NhZ2VzQWNjdW11bGF0b3JVbmlxdWVUeXBlWzBdLmlkICYmICF0aGlzLmVycm9yTWVzc2FnZXNBY2N1bXVsYXRvclVuaXF1ZVR5cGVbMF0uaWQuZW5kc1dpdGgoXCJfZXJyb3IwXCIpKSB7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlc0FjY3VtdWxhdG9yVW5pcXVlVHlwZVswXS5pZCA9IHRoaXMuZXJyb3JNZXNzYWdlc0FjY3VtdWxhdG9yVW5pcXVlVHlwZVswXS5pZCArIFwiX2Vycm9yMFwiXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNWYWxpZChjaGVja2JveDogSUNoZWNrQm94Q29tcG9uZW50Q29uZmlnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjaGVja2JveCAhPT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICByZW1vdmVSZXNwb25zZUZyb21FcnJvcihyZXNwb25zZTogYW55KSB7XG4gICAgdGhpcy5jb25maWcuZXJyb3JNZXNzYWdlcyA9IHRoaXMuY29uZmlnLmVycm9yTWVzc2FnZXMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICBpdGVtPy5rZXkgIT09IHJlc3BvbnNlLmlkO1xuICAgIH0pO1xuICB9XG59XG4iLCI8ZmllbGRzZXQ+XG4gIDxsZWdlbmQgY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj5cbiAgICB7eyBjb25maWcubGFiZWwubGFiZWwgfHwgJycgfCB0cmFuc2xhdGUgfX1cbiAgPC9sZWdlbmQ+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb25maWcubGFiZWxcIj5cbiAgICA8aXJjYy1jbC1saWItbGFiZWxcbiAgICAgIFtjb25maWddPVwiY29uZmlnLmxhYmVsXCJcbiAgICAgIFtsZWdlbmRdPVwidHJ1ZVwiXG4gICAgICBbYXR0ci5zaXplXT1cInNpemVcIlxuICAgID48L2lyY2MtY2wtbGliLWxhYmVsPlxuICA8L25nLWNvbnRhaW5lcj5cbiAgPGRpdiBjbGFzcz1cInBhcmVudC1jaGVja2JveFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb25maWcucGFyZW50OyBlbHNlIGdyb3VwXCI+XG4gICAgICA8aXJjYy1jbC1saWItY2hlY2tib3ggW2NvbmZpZ109XCJjb25maWcucGFyZW50XCI+PC9pcmNjLWNsLWxpYi1jaGVja2JveD5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGNoaWxkIG9mIGNvbmZpZy5jaGlsZHJlblwiPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcbiAgICAgICAgICAgIHJlY3Vyc2l2ZUxpc3RUbXBsO1xuICAgICAgICAgICAgY29udGV4dDogeyBjaGVja0JveENvbmZpZzogY2hpbGQgfVxuICAgICAgICAgIFwiXG4gICAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cblxuICA8bmctdGVtcGxhdGUgI2dyb3VwPlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGNoaWxkIG9mIGNvbmZpZy5jaGlsZHJlblwiPlxuICAgICAgPGlyY2MtY2wtbGliLWNoZWNrYm94IFtjb25maWddPVwiY2hpbGRcIj48L2lyY2MtY2wtbGliLWNoZWNrYm94PlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLXRlbXBsYXRlPlxuXG4gIDxuZy10ZW1wbGF0ZVxuICAgICNyZWN1cnNpdmVMaXN0VG1wbFxuICAgIGxldC1jaGVja0JveENvbmZpZz1cImNoZWNrQm94Q29uZmlnXCJcbiAgPlxuICAgIDxkaXYgY2xhc3M9XCJjaGlsZC1jaGVja2JveFwiPlxuICAgICAgPGlyY2MtY2wtbGliLWNoZWNrYm94IFtjb25maWddPVwiY2hlY2tCb3hDb25maWdcIj48L2lyY2MtY2wtbGliLWNoZWNrYm94PlxuICAgIDwvZGl2PlxuICA8L25nLXRlbXBsYXRlPlxuICA8bmctY29udGFpbmVyXG4gICAgKm5nRm9yPVwibGV0IGVycm9ycyBvZiBlcnJvck1lc3NhZ2VzQWNjdW11bGF0b3JVbmlxdWVUeXBlOyBsZXQgaSA9IGluZGV4XCJcbiAgPlxuICAgIDxkaXZcbiAgICAgICpuZ0lmPVwiZXJyb3JNZXNzYWdlc0FjY3VtdWxhdG9yVW5pcXVlVHlwZS5sZW5ndGggPiAtMSAmJiAhZGlzYWJsZWRTdGF0dXNcIlxuICAgICAgY2xhc3M9XCJyYWRpby1lcnJvcnNcIlxuICAgID5cbiAgICAgIDxpcmNjLWNsLWxpYi1lcnJvclxuICAgICAgICBbaWRdPVwiZXJyb3JzLmlkXCJcbiAgICAgICAgW2Vycm9yTE9WXT1cImVycm9ycy5lcnJvckxPVlwiXG4gICAgICAgIFthdHRyLnNpemVdPVwic2l6ZVwiXG4gICAgICA+PC9pcmNjLWNsLWxpYi1lcnJvcj5cbiAgICA8L2Rpdj5cbiAgPC9uZy1jb250YWluZXI+XG48L2ZpZWxkc2V0PlxuIl19