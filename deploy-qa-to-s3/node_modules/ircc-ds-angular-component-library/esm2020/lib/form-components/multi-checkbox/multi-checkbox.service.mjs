import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class MultiCheckboxService {
    constructor() {
        //This is a subject, we're making subject => observable after
        // Anytime change to subject, it will propagate out to all other things related to it
        this.multiCheckboxEventSubj = new Subject();
        this.multiCheckboxEventObs$ = this.multiCheckboxEventSubj.asObservable(); //Use this for any events we need propagated up to parents
        this.multiCheckboxErrorSubj = new Subject();
        this.multiCheckboxErrorObs$ = this.multiCheckboxErrorSubj.asObservable();
    }
    /**
     * Broadcast element events
     * @param event: ImultiCheckboxEvent where id is the id of the component broadcasting and event is the Event
     */
    checkEvent(event) {
        this.multiCheckboxEventSubj.next(event);
    }
    errorEvent(event) {
        this.multiCheckboxErrorSubj.next(event);
    }
    /**
     * Checks to see if an AbstractControl is valid or not.
     * @param control: AbstractControl field that we are checking
     * @param field: string, name of the field we are checking
     */
    checkField(id) {
        //is the control valid
        this.errorEvent(id);
    }
}
MultiCheckboxService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MultiCheckboxService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MultiCheckboxService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MultiCheckboxService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: MultiCheckboxService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2hlY2tib3guc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudC1saWIvc3JjL2xpYi9mb3JtLWNvbXBvbmVudHMvbXVsdGktY2hlY2tib3gvbXVsdGktY2hlY2tib3guc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBVy9CLE1BQU0sT0FBTyxvQkFBb0I7SUFIakM7UUFJRSw2REFBNkQ7UUFDN0QscUZBQXFGO1FBQzdFLDJCQUFzQixHQUFHLElBQUksT0FBTyxFQUF1QixDQUFDO1FBQ3BFLDJCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLDBEQUEwRDtRQVV2SCwyQkFBc0IsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQ3ZELDJCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQWVyRTtJQXhCQzs7O09BR0c7SUFDSCxVQUFVLENBQUMsS0FBMEI7UUFDbkMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBS0QsVUFBVSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxFQUFVO1FBQ25CLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7O2tIQTdCVSxvQkFBb0I7c0hBQXBCLG9CQUFvQixjQUZuQixNQUFNOzRGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU11bHRpQ2hlY2tib3hFdmVudCB7XG4gIGlkOiBzdHJpbmc7XG4gIGV2ZW50OiBhbnk7XG4gIHJlbW92ZT86IGJvb2xlYW47XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE11bHRpQ2hlY2tib3hTZXJ2aWNlIHtcbiAgLy9UaGlzIGlzIGEgc3ViamVjdCwgd2UncmUgbWFraW5nIHN1YmplY3QgPT4gb2JzZXJ2YWJsZSBhZnRlclxuICAvLyBBbnl0aW1lIGNoYW5nZSB0byBzdWJqZWN0LCBpdCB3aWxsIHByb3BhZ2F0ZSBvdXQgdG8gYWxsIG90aGVyIHRoaW5ncyByZWxhdGVkIHRvIGl0XG4gIHByaXZhdGUgbXVsdGlDaGVja2JveEV2ZW50U3ViaiA9IG5ldyBTdWJqZWN0PElNdWx0aUNoZWNrYm94RXZlbnQ+KCk7XG4gIG11bHRpQ2hlY2tib3hFdmVudE9icyQgPSB0aGlzLm11bHRpQ2hlY2tib3hFdmVudFN1YmouYXNPYnNlcnZhYmxlKCk7IC8vVXNlIHRoaXMgZm9yIGFueSBldmVudHMgd2UgbmVlZCBwcm9wYWdhdGVkIHVwIHRvIHBhcmVudHNcblxuICAvKipcbiAgICogQnJvYWRjYXN0IGVsZW1lbnQgZXZlbnRzXG4gICAqIEBwYXJhbSBldmVudDogSW11bHRpQ2hlY2tib3hFdmVudCB3aGVyZSBpZCBpcyB0aGUgaWQgb2YgdGhlIGNvbXBvbmVudCBicm9hZGNhc3RpbmcgYW5kIGV2ZW50IGlzIHRoZSBFdmVudFxuICAgKi9cbiAgY2hlY2tFdmVudChldmVudDogSU11bHRpQ2hlY2tib3hFdmVudCkge1xuICAgIHRoaXMubXVsdGlDaGVja2JveEV2ZW50U3Viai5uZXh0KGV2ZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgbXVsdGlDaGVja2JveEVycm9yU3ViaiA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcbiAgbXVsdGlDaGVja2JveEVycm9yT2JzJCA9IHRoaXMubXVsdGlDaGVja2JveEVycm9yU3Viai5hc09ic2VydmFibGUoKTtcblxuICBlcnJvckV2ZW50KGV2ZW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLm11bHRpQ2hlY2tib3hFcnJvclN1YmoubmV4dChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRvIHNlZSBpZiBhbiBBYnN0cmFjdENvbnRyb2wgaXMgdmFsaWQgb3Igbm90LlxuICAgKiBAcGFyYW0gY29udHJvbDogQWJzdHJhY3RDb250cm9sIGZpZWxkIHRoYXQgd2UgYXJlIGNoZWNraW5nXG4gICAqIEBwYXJhbSBmaWVsZDogc3RyaW5nLCBuYW1lIG9mIHRoZSBmaWVsZCB3ZSBhcmUgY2hlY2tpbmdcbiAgICovXG4gIGNoZWNrRmllbGQoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vaXMgdGhlIGNvbnRyb2wgdmFsaWRcbiAgICB0aGlzLmVycm9yRXZlbnQoaWQpO1xuICB9XG59XG4iXX0=