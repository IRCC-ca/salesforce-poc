import { Component, forwardRef, HostListener, Input } from '@angular/core';
import { FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/functions/stand-alone.functions";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "../../shared/label/label.component";
import * as i5 from "@angular/forms";
import * as i6 from "../error/error.component";
export const MAX_CHAR_LIMIT_EN = 'Maximum character limit reached.';
export const MAX_CHAR_LIMIT_FR = 'Limite maximale de caractères atteinte.';
export const WARNING_CHAR_LIMIT_EN = 'Maximum character limit reached in 15 characters.';
export const WARNING_CHAR_LIMIT_FR = 'Limite maximale de caractères atteinte en 15 caractères.';
export var ResizableTypes;
(function (ResizableTypes) {
    ResizableTypes["vertical"] = "vertical";
    ResizableTypes["horizontal"] = "password";
    ResizableTypes["both"] = "both";
    ResizableTypes["none"] = "none";
})(ResizableTypes || (ResizableTypes = {}));
export class TextareaComponent {
    constructor(standAloneFunctions, translate) {
        this.standAloneFunctions = standAloneFunctions;
        this.translate = translate;
        this.formGroupEmpty = new FormGroup({});
        //DON'T include default values of '' unless it REALLY makes sense to do so. Instead, make them optional
        this.config = {
            id: '',
            formGroup: new FormGroup({})
        };
        this.id = '';
        this.formGroup = this.formGroupEmpty;
        this.charLimit = '';
        this.disabled = false;
        this.focusState = false;
        this.errorIds = [];
        this.charLimitStatus = '';
        this.currentCharacterStatusAria = '';
        this.currentStatus = 'VALID';
        this.announceCharStatusChangeAria = false;
        this.charLength = -1;
        this.labelConfig = {
            formGroup: this.config.formGroup,
            parentID: ''
        };
        this.isEventActive = false;
        this.announceMaxCharaterLimitReached = '';
        //Removed '!' and added null case in onChange
        this.onTouch = () => {
            if (this.config.formGroup?.get(this.config.id)?.touched === false) {
                this.config.formGroup?.get(this.config.id)?.markAsTouched();
            }
        };
        this.onChange = (value) => {
            this.config.formGroup.get(this.config.id)?.setValue(value);
        };
    }
    ngOnInit() {
        //set config from individual options, if present
        if (this.id !== '')
            this.config.id = this.id;
        if (this.formGroup !== this.formGroupEmpty)
            this.config.formGroup = this.formGroup;
        if (this.charLimit !== '')
            this.config.charLimit = this.charLimit;
        if (this.size)
            this.config.size = this.size;
        if (this.label)
            this.config.label = this.label;
        if (this.desc)
            this.config.desc = this.desc;
        if (this.hint)
            this.config.hint = this.hint;
        if (this.placeholder)
            this.config.placeholder = this.placeholder;
        if (this.required)
            this.config.required = this.required;
        if (this.resizable)
            this.config.resizable = this.resizable;
        if (this.errorMessages)
            this.config.errorMessages = this.errorMessages;
        if (this.errorIcon)
            this.config.errorIcon = this.errorIcon;
        if (this.config.charLimit != '' && this.config.charLimit) {
            this.charLength = 0;
        }
        if (this.config.errorMessages) {
            this.errorIds = this.standAloneFunctions.getErrorIds(this.config.formGroup, this.config.id, this.config.errorMessages);
        }
        if (this.config.formGroup.controls[this.config.id].value) {
            this.charLength =
                this.config.formGroup.controls[this.config.id].value.length;
            this.characterCountStatus(this.config.formGroup.controls[this.config.id].value.length);
        }
        this.config.formGroup.valueChanges.subscribe((change) => {
            this.characterCountStatus(change[this.config.id]?.length);
        });
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
        this.currentStatus =
            this.config.formGroup.get(this.config.id)?.status || 'DISABLED';
        this.toggleDisabledState();
        this.config.formGroup
            .get(this.config.id)
            ?.statusChanges.subscribe((change) => {
            if (change !== this.currentStatus) {
                this.currentStatus = change;
                this.toggleDisabledState();
            }
        });
        this.translate.currentLang === 'en' || this.translate.currentLang === 'en-US'
            ? (this.announceMaxCharaterLimitReached = MAX_CHAR_LIMIT_EN)
            : (this.announceMaxCharaterLimitReached = MAX_CHAR_LIMIT_FR);
    }
    toggleDisabledState() {
        switch (this.currentStatus) {
            case 'DISABLED':
                this.setDisabledState(true);
                break;
            default:
                this.setDisabledState(false);
                break;
        }
    }
    ngOnChanges() {
        this.labelConfig = this.standAloneFunctions.makeLabelConfig(this.config.formGroup, this.config.id, this.config.errorMessages, this.config.label, this.config.desc, this.config.hint, this.config.required, this.config.labelIconConfig);
    }
    focusInput(focusValue) {
        this.focusState = !focusValue;
    }
    characterCountStatus(currCharCount) {
        let currLang = this.translate.currentLang;
        if (this.config?.charLimit) {
            if (this.config?.charLimit == currCharCount) {
                this.charLimitStatus = 'maxLimit';
                currLang === 'en' || currLang === 'en-US'
                    ? (this.currentCharacterStatusAria = MAX_CHAR_LIMIT_EN)
                    : (this.currentCharacterStatusAria = MAX_CHAR_LIMIT_FR);
                this.announceCharStatusChangeAria = true;
                this.isEventActive = true;
            }
            else if (Number(this.config?.charLimit) - currCharCount == 15) {
                this.charLimitStatus = 'warningLimit';
                currLang === 'en' || currLang === 'en-US'
                    ? (this.currentCharacterStatusAria = WARNING_CHAR_LIMIT_EN)
                    : (this.currentCharacterStatusAria = WARNING_CHAR_LIMIT_FR);
                this.announceCharStatusChangeAria = true;
                this.isEventActive = false;
            }
            else if (Number(this.config?.charLimit) - currCharCount < 15) {
                this.charLimitStatus = 'warningLimit';
                this.currentCharacterStatusAria = '';
                this.isEventActive = false;
            }
            else {
                this.charLimitStatus = '';
                this.currentCharacterStatusAria = '';
                this.isEventActive = false;
            }
        }
    }
    onBlur() {
        this.announceCharStatusChangeAria = false;
        if (this.config.formGroup.controls[this.config.id].value) {
            this.charLength =
                this.config.formGroup.controls[this.config.id].value.length;
        }
        else {
            this.charLength = 0;
        }
    }
    //Keep announcing max char limit reached for each keypress made after max limit has reached
    onKeyPress(event) {
        if (this.isEventActive) {
            if (this.announceMaxCharaterLimitReached === MAX_CHAR_LIMIT_EN || this.announceMaxCharaterLimitReached === MAX_CHAR_LIMIT_FR) {
                this.announceMaxCharaterLimitReached += '&nbsp;';
            }
            else {
                this.translate.currentLang === 'en' || this.translate.currentLang === 'en-US'
                    ? (this.announceMaxCharaterLimitReached = MAX_CHAR_LIMIT_EN)
                    : (this.announceMaxCharaterLimitReached = MAX_CHAR_LIMIT_FR);
            }
        }
        if (this.charLimitStatus !== 'maxLimit') {
            this.isEventActive = false;
        }
    }
    formatCharacterUsedString(currentLength) {
        var formatedString = '';
        var currentLengthString = currentLength.toString();
        if (currentLengthString === '-1' ||
            this.config.charLimit === '' ||
            !this.config.charLimit) {
            return formatedString;
        }
        formatedString = currentLengthString + '/' + this.config.charLimit;
        return formatedString;
    }
    clearvalue() { }
    changeValue(event) {
        this.writeValue(event.target.value);
        this.onTouch();
    }
    writeValue(value) {
        this.onChange(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    setDisabledState(isDisabled) {
        isDisabled
            ? this.formGroup.get(this.config.id)?.disable()
            : this.formGroup.get(this.config.id)?.enable();
    }
}
TextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TextareaComponent, deps: [{ token: i1.StandAloneFunctions }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
TextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: TextareaComponent, selector: "ircc-cl-lib-textarea", inputs: { config: "config", id: "id", formGroup: "formGroup", size: "size", label: "label", desc: "desc", hint: "hint", placeholder: "placeholder", required: "required", charLimit: "charLimit", resizable: "resizable", errorMessages: "errorMessages", errorIcon: "errorIcon" }, host: { listeners: { "window:keypress": "onKeyPress($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TextareaComponent),
            multi: true
        }
    ], usesOnChanges: true, ngImport: i0, template: "<div>\n  <form [formGroup]=\"config.formGroup\">\n    <div\n      class=\"textarea-container\"\n      ngClass=\"{{ config.size }} resize-{{ config.resizable }}\"\n    >\n      <div>\n        <ircc-cl-lib-label\n          [config]=\"labelConfig\"\n          [attr.size]=\"config.size\"\n        ></ircc-cl-lib-label>\n        <div\n          class=\"content-area\"\n          [ngClass]=\"focusState === true ? 'focus' : ''\"\n        >\n          <textarea\n            class=\"textarea-field\"\n            maxlength=\"{{ config.charLimit }}\"\n            placeholder=\"{{\n              announceCharStatusChangeAria\n                ? ''\n                : (config.placeholder || '' | translate)\n            }}\"\n            [id]=\"config.id\"\n            tabindex=\"0\"\n            (blur)=\"onBlur()\"\n            (change)=\"changeValue($event)\"\n            [formControlName]=\"config.id\"\n            [attr.aria-label]=\"\n              announceCharStatusChangeAria\n                ? currentCharacterStatusAria\n                : (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate) +\n                  ' ' +\n                  (config.placeholder || '' | translate) +\n                  ' ' +\n                  formatCharacterUsedString(charLength)\n            \"\n            #textareaInput\n          >\n          </textarea>\n          <p\n            *ngIf=\"config.charLimit\"\n            class=\"character-count\"\n            [ngClass]=\"charLimitStatus\"\n          >\n            {{ textareaInput.value.length }}/{{ config.charLimit }}\n          </p>\n          <span\n            class=\"sr-only\"\n            aria-live=\"polite\"\n            [innerHTML]=\"announceMaxCharaterLimitReached\"\n          >\n          </span>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"\n          config.formGroup.get(config.id)?.touched &&\n          config.formGroup.get(config.id)?.invalid\n        \"\n        class=\"check-error\"\n      >\n        <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n          <div\n            *ngIf=\"config.formGroup.get(config.id)?.errors?.[errors.key]\"\n            class=\"radio-errors\"\n          >\n            <ircc-cl-lib-error\n              [size]=\"config.size\"\n              [id]=\"errors.id\"\n              [errorLOV]=\"errors.errorLOV\"\n            ></ircc-cl-lib-error>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </form>\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.LabelComponent, selector: "ircc-cl-lib-label", inputs: ["config", "formGroup", "errorMessages", "parentID", "label", "desc", "hint", "required", "iconButton", "topLabel", "touched", "legend"] }, { kind: "directive", type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i5.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i6.ErrorComponent, selector: "ircc-cl-lib-error", inputs: ["config", "id", "errorLOV", "icon", "size"] }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: TextareaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-textarea', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TextareaComponent),
                            multi: true
                        }
                    ], template: "<div>\n  <form [formGroup]=\"config.formGroup\">\n    <div\n      class=\"textarea-container\"\n      ngClass=\"{{ config.size }} resize-{{ config.resizable }}\"\n    >\n      <div>\n        <ircc-cl-lib-label\n          [config]=\"labelConfig\"\n          [attr.size]=\"config.size\"\n        ></ircc-cl-lib-label>\n        <div\n          class=\"content-area\"\n          [ngClass]=\"focusState === true ? 'focus' : ''\"\n        >\n          <textarea\n            class=\"textarea-field\"\n            maxlength=\"{{ config.charLimit }}\"\n            placeholder=\"{{\n              announceCharStatusChangeAria\n                ? ''\n                : (config.placeholder || '' | translate)\n            }}\"\n            [id]=\"config.id\"\n            tabindex=\"0\"\n            (blur)=\"onBlur()\"\n            (change)=\"changeValue($event)\"\n            [formControlName]=\"config.id\"\n            [attr.aria-label]=\"\n              announceCharStatusChangeAria\n                ? currentCharacterStatusAria\n                : (config.label || '' | translate) +\n                  ' ' +\n                  (config.desc || '' | translate) +\n                  ' ' +\n                  (config.hint || '' | translate) +\n                  ' ' +\n                  (config.placeholder || '' | translate) +\n                  ' ' +\n                  formatCharacterUsedString(charLength)\n            \"\n            #textareaInput\n          >\n          </textarea>\n          <p\n            *ngIf=\"config.charLimit\"\n            class=\"character-count\"\n            [ngClass]=\"charLimitStatus\"\n          >\n            {{ textareaInput.value.length }}/{{ config.charLimit }}\n          </p>\n          <span\n            class=\"sr-only\"\n            aria-live=\"polite\"\n            [innerHTML]=\"announceMaxCharaterLimitReached\"\n          >\n          </span>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"\n          config.formGroup.get(config.id)?.touched &&\n          config.formGroup.get(config.id)?.invalid\n        \"\n        class=\"check-error\"\n      >\n        <ng-container *ngFor=\"let errors of errorIds; let i = index\">\n          <div\n            *ngIf=\"config.formGroup.get(config.id)?.errors?.[errors.key]\"\n            class=\"radio-errors\"\n          >\n            <ircc-cl-lib-error\n              [size]=\"config.size\"\n              [id]=\"errors.id\"\n              [errorLOV]=\"errors.errorLOV\"\n            ></ircc-cl-lib-error>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </form>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StandAloneFunctions }, { type: i2.TranslateService }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], desc: [{
                type: Input
            }], hint: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], required: [{
                type: Input
            }], charLimit: [{
                type: Input
            }], resizable: [{
                type: Input
            }], errorMessages: [{
                type: Input
            }], errorIcon: [{
                type: Input
            }], onKeyPress: [{
                type: HostListener,
                args: ['window:keypress', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,