import { Input, ViewChild } from '@angular/core';
import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./navigation.service";
import * as i2 from "@angular/common";
import * as i3 from "../icon/icon.component";
import * as i4 from "./nav-item-heading/nav-item-heading.component";
import * as i5 from "./nav-item-nav/nav-item-nav.component";
import * as i6 from "./nav-item-accordion/nav-item-accordion.component";
import * as i7 from "./nav-item-divider/nav-item-divider.component";
import * as i8 from "@ngx-translate/core";
export class navigationComponent {
    constructor(navService, renderer, el) {
        this.navService = navService;
        this.renderer = renderer;
        this.el = el;
        this.id = '';
        this.label = '';
        this.iconLeading = '';
        this.iconTrailing = '';
        //TODO: NavigationItem and all other interfaces must be renamed starting with 'I'
        this.navigationConfig = [];
        this.flattenNavigation = [];
        this.config = {
            id: '',
            label: '',
            iconLeading: '',
            iconTrailing: '',
            size: 'small',
            navigationConfig: [],
            scrolling: false,
            height: '75vh',
            marginTop: 0,
            childrenPadding: true
        };
        this.wrapperFixed = false;
        this.listenerScroll = () => { };
        this.listenerResize = () => { };
        this.isArray = (obj) => {
            return Array.isArray(obj);
        };
        this.arrayOfObject = (obj) => {
            return Object.keys(obj);
        };
        this.getIconsStatus = () => {
            return (this.config &&
                (this.config?.iconLeading || '').length > 0 &&
                (this.config?.iconTrailing || '').length > 0);
        };
        //These are in THIS component, not in it's own. I.e. the buttons in the actual
        //header are not in a child component.
        this.clickIconLeading = (event) => {
            this.navService.navEvent({ id: this.config.id, event: event });
        };
        this.clickIconTrailing = (event) => {
            this.navService.navEvent({ id: this.config.id, event: event });
        };
        this.navigationClass = () => {
            if (((this.config?.iconLeading?.length || ''.length > 0) &&
                this.config?.iconTrailing?.length) ||
                ''.length > 0) {
                return 'header-full';
            }
            else if (this.config?.iconLeading?.length || ''.length > 0) {
                return 'header-iconleading';
            }
            else if (this.config?.iconTrailing?.length || ''.length > 0) {
                return 'header-icontrailing';
            }
            return '';
        };
        this.getHeight = () => {
            this.listenerScroll();
            this.listenerResize();
            if (this.complicatedMaths() === true) {
                this.disableStickyNav();
                this.setScrollableNavigationArea();
                this.listenerResize = this.renderer.listen('window', 'resize', () => {
                    this.setScrollableNavigationArea();
                });
            }
            else if (this.complicatedMaths() === false) {
                this.disableSetScrollableNavigationArea();
                this.setStickyNav();
                this.listenerScroll = this.renderer.listen('window', 'scroll', () => {
                    this.scrolling();
                });
            }
        };
        this.scrolling = () => {
            if (this.scrollTimeout) {
                clearTimeout(this.scrollTimeout);
            }
            this.scrollTimeout = setTimeout((() => {
                this.setStickyNav();
            }).bind(this), 50);
        };
        this.setStickyNav = () => {
            if (window.pageYOffset > this.navigationHeader?.nativeElement.offsetHeight) {
                this.renderer.addClass(this.navigationHeader?.nativeElement, 'position-fixed');
                this.renderer.setStyle(this.navigationHeader?.nativeElement, 'top', `${this.config?.marginTop}px`);
                this.renderer.setStyle(this.navigationAreaScroll?.nativeElement, 'margin-top', this.navigationHeader?.nativeElement.offsetHeight +
                    this.config?.marginTop +
                    'px');
            }
            else {
                this.renderer.removeClass(this.navigationHeader?.nativeElement, 'position-fixed');
                this.renderer.removeStyle(this.navigationHeader?.nativeElement, 'top');
                this.renderer.removeStyle(this.navigationAreaScroll?.nativeElement, 'margin-top');
            }
        };
        this.disableStickyNav = () => {
            this.renderer.removeClass(this.navigationHeader?.nativeElement, 'position-fixed');
            this.renderer.removeStyle(this.navigationHeader?.nativeElement, 'top');
            this.renderer.removeStyle(this.navigationAreaScroll?.nativeElement, 'margin-top');
            this.renderer.removeStyle(this.navigationArea?.nativeElement, 'height');
        };
        this.complicatedMaths = () => {
            let windowheight = window.innerHeight;
            let usableHeight = windowheight -
                (this.navigationHeader?.nativeElement.offsetHeight +
                    this.navigationContentTop?.nativeElement.offsetHeight +
                    this.navigationContentBottom?.nativeElement.offsetHeight);
            return usableHeight > windowheight / 2 ? true : false;
        };
        this.setScrollableNavigationArea = () => {
            this.renderer.setStyle(this.navigation?.nativeElement, 'height', this.config.height);
            this.renderer.setStyle(this.navigation?.nativeElement, 'overflow-y', 'auto');
            this.renderer.setStyle(this.navigation?.nativeElement, 'overflow-x', 'clip');
        };
        this.disableSetScrollableNavigationArea = () => {
            this.renderer.removeStyle(this.navigation?.nativeElement, 'height');
            this.renderer.removeStyle(this.navigation?.nativeElement, 'overflow-y');
            this.renderer.removeStyle(this.navigation?.nativeElement, 'overflow-x');
        };
        this.setIndex = (index) => {
            return (index += 1);
        };
    }
    ngOnInit() {
        this.configSub = this.navService.navConfigObs$.subscribe((response) => {
            this.config = response;
            if (this.config?.childrenPadding != true &&
                this.config?.childrenPadding != false) {
                this.config.childrenPadding = true;
            }
        });
        // Record relative height from top of page for sidenav
        this.wrapperTop = this.el.nativeElement?.getBoundingClientRect().top;
    }
    getPaddingChildrenPadding(index) {
        let classes = '';
        if (this.config?.childrenPadding === true) {
            classes += 'indent-' + index;
        }
        return classes;
    }
    ngAfterViewInit() {
        this.wrapperWidth = this.el.nativeElement.parentElement.offsetWidth;
        if (this.config.scrolling === true) {
            this.getHeight();
            this.renderer.listen('window', 'resize', () => {
                this.getHeight();
                setTimeout(() => {
                    // Update element width upon window resize
                    this.wrapperWidth = this.el.nativeElement.parentElement.offsetWidth;
                });
            });
        }
        if (this.config.fixed) {
            this.renderer.listen('window', 'scroll', () => {
                // Check if navigation top has hit top of viewport
                if (this.wrapperTop) {
                    this.wrapperFixed = this.wrapperTop < window.scrollY;
                }
            });
        }
    }
}
navigationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: navigationComponent, deps: [{ token: i1.NavigationService }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
navigationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: navigationComponent, selector: "ircc-cl-lib-navigation", inputs: { id: "id", label: "label", iconLeading: "iconLeading", iconTrailing: "iconTrailing", size: "size", navigationConfig: "navigationConfig" }, viewQueries: [{ propertyName: "navigationHeader", first: true, predicate: ["navigationHeader"], descendants: true }, { propertyName: "navigationContentTop", first: true, predicate: ["navigationContentTop"], descendants: true }, { propertyName: "navigationContentBottom", first: true, predicate: ["navigationContentBottom"], descendants: true }, { propertyName: "navigationArea", first: true, predicate: ["navigationArea"], descendants: true }, { propertyName: "navigationAreaScroll", first: true, predicate: ["navigationAreaScroll"], descendants: true }, { propertyName: "navigation", first: true, predicate: ["navigation"], descendants: true }], ngImport: i0, template: "<div\n  [id]=\"config.id\"\n  [attr.size]=\"config.size\"\n  class=\"lib-navigation\"\n  [ngClass]=\"{ fixed: config.fixed && wrapperFixed }\"\n  [style.max-width]=\"\n    wrapperFixed && wrapperWidth && wrapperWidth > 0\n      ? wrapperWidth + 'px'\n      : 'none'\n  \"\n  #navigation\n>\n  <div\n    class=\"navigation-header\"\n    [class]=\"navigationClass()\"\n    #navigationHeader\n  >\n    <ircc-cl-lib-icon\n      class=\"icon-leading\"\n      [config]=\"{ FA_keywords: config?.iconLeading || '' }\"\n      (click)=\"clickIconLeading(config.id + '_icon_leading')\"\n      [attr.size]=\"config.size\"\n    ></ircc-cl-lib-icon>\n    <ng-container *ngIf=\"config?.label\">\n      <h3>{{ config?.label || '' | translate }}</h3>\n    </ng-container>\n    <ircc-cl-lib-icon\n      [id]=\"config.id + '_icon_trailing'\"\n      class=\"icon-trailing\"\n      [attr.size]=\"config.size\"\n      [config]=\"{ FA_keywords: config?.iconTrailing || '' }\"\n      (click)=\"clickIconTrailing(config.id + '_icon_trailing')\"\n    ></ircc-cl-lib-icon>\n  </div>\n\n  <div #navigationAreaScroll>\n    <!-- ignore-->\n    <!-- prettier-ignore -->\n    <div class=\"navigation-content-top\" #navigationContentTop ><ng-content select=\"[navigationContentTop]\"></ng-content></div>\n\n    <!-- TODO: Document this like crazy - recursive templating is cool, but EXTREMELY unusual -->\n    <div\n      class=\"navigation-area\"\n      #navigationArea\n    >\n      <ul class=\"parent-navigation\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            recursiveListTmpl;\n            context: { list: this.config.navigationConfig, index: 0 }\n          \"\n        ></ng-container>\n      </ul>\n    </div>\n\n    <ng-template\n      #recursiveListTmpl\n      let-list=\"list\"\n      let-index=\"index\"\n    >\n      <li *ngFor=\"let item of list\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <!--Type Heading-->\n          <ng-container *ngSwitchCase=\"'heading'\"\n            ><ircc-cl-lib-nav-header\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul></ircc-cl-lib-nav-header\n          ></ng-container>\n\n          <!--Type Link-->\n          <ng-container *ngSwitchCase=\"'link'\">\n            <ircc-cl-lib-nav-item\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul></ircc-cl-lib-nav-item\n          ></ng-container>\n\n          <!--Type Accordion-->\n          <ng-container *ngSwitchCase=\"'accordion'\">\n            <ircc-cl-lib-nav-accordion\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul\n            ></ircc-cl-lib-nav-accordion>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"'divider'\">\n            <ircc-cl-lib-nav-divider\n              [attr.size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul\n            ></ircc-cl-lib-nav-divider>\n          </ng-container>\n        </ng-container>\n      </li>\n    </ng-template>\n\n    <!-- prettier-ignore -->\n    <div class=\"navigation-content-bottom\" #navigationContentBottom><ng-content select=\"[navigationContentBottom]\"></ng-content></div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i3.IconComponent, selector: "ircc-cl-lib-icon", inputs: ["config", "ariaLabel", "FA_keywords", "size"] }, { kind: "component", type: i4.navItemHeadingComponent, selector: "ircc-cl-lib-nav-header", inputs: ["config", "id", "label", "iconLeading", "children", "size", "leftPadding", "bold"] }, { kind: "component", type: i5.navItemNavComponent, selector: "ircc-cl-lib-nav-item", inputs: ["config", "id", "size", "indicator"] }, { kind: "component", type: i6.navItemAccordionComponent, selector: "ircc-cl-lib-nav-accordion", inputs: ["config", "id", "open", "label", "size", "iconLeading", "leftPadding", "bold"] }, { kind: "component", type: i7.navItemDividerComponent, selector: "ircc-cl-lib-nav-divider", inputs: ["config", "id"] }, { kind: "pipe", type: i8.TranslatePipe, name: "translate" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: navigationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-navigation', template: "<div\n  [id]=\"config.id\"\n  [attr.size]=\"config.size\"\n  class=\"lib-navigation\"\n  [ngClass]=\"{ fixed: config.fixed && wrapperFixed }\"\n  [style.max-width]=\"\n    wrapperFixed && wrapperWidth && wrapperWidth > 0\n      ? wrapperWidth + 'px'\n      : 'none'\n  \"\n  #navigation\n>\n  <div\n    class=\"navigation-header\"\n    [class]=\"navigationClass()\"\n    #navigationHeader\n  >\n    <ircc-cl-lib-icon\n      class=\"icon-leading\"\n      [config]=\"{ FA_keywords: config?.iconLeading || '' }\"\n      (click)=\"clickIconLeading(config.id + '_icon_leading')\"\n      [attr.size]=\"config.size\"\n    ></ircc-cl-lib-icon>\n    <ng-container *ngIf=\"config?.label\">\n      <h3>{{ config?.label || '' | translate }}</h3>\n    </ng-container>\n    <ircc-cl-lib-icon\n      [id]=\"config.id + '_icon_trailing'\"\n      class=\"icon-trailing\"\n      [attr.size]=\"config.size\"\n      [config]=\"{ FA_keywords: config?.iconTrailing || '' }\"\n      (click)=\"clickIconTrailing(config.id + '_icon_trailing')\"\n    ></ircc-cl-lib-icon>\n  </div>\n\n  <div #navigationAreaScroll>\n    <!-- ignore-->\n    <!-- prettier-ignore -->\n    <div class=\"navigation-content-top\" #navigationContentTop ><ng-content select=\"[navigationContentTop]\"></ng-content></div>\n\n    <!-- TODO: Document this like crazy - recursive templating is cool, but EXTREMELY unusual -->\n    <div\n      class=\"navigation-area\"\n      #navigationArea\n    >\n      <ul class=\"parent-navigation\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            recursiveListTmpl;\n            context: { list: this.config.navigationConfig, index: 0 }\n          \"\n        ></ng-container>\n      </ul>\n    </div>\n\n    <ng-template\n      #recursiveListTmpl\n      let-list=\"list\"\n      let-index=\"index\"\n    >\n      <li *ngFor=\"let item of list\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <!--Type Heading-->\n          <ng-container *ngSwitchCase=\"'heading'\"\n            ><ircc-cl-lib-nav-header\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul></ircc-cl-lib-nav-header\n          ></ng-container>\n\n          <!--Type Link-->\n          <ng-container *ngSwitchCase=\"'link'\">\n            <ircc-cl-lib-nav-item\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul></ircc-cl-lib-nav-item\n          ></ng-container>\n\n          <!--Type Accordion-->\n          <ng-container *ngSwitchCase=\"'accordion'\">\n            <ircc-cl-lib-nav-accordion\n              [attr.size]=\"config.size\"\n              [size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul\n            ></ircc-cl-lib-nav-accordion>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"'divider'\">\n            <ircc-cl-lib-nav-divider\n              [attr.size]=\"config.size\"\n              [config]=\"item\"\n            >\n              <ul\n                *ngIf=\"item.children.length > 0\"\n                class=\"child-navigation\"\n                [class]=\"getPaddingChildrenPadding(index)\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"\n                    recursiveListTmpl;\n                    context: { list: item.children, index: setIndex(index) }\n                  \"\n                ></ng-container></ul\n            ></ircc-cl-lib-nav-divider>\n          </ng-container>\n        </ng-container>\n      </li>\n    </ng-template>\n\n    <!-- prettier-ignore -->\n    <div class=\"navigation-content-bottom\" #navigationContentBottom><ng-content select=\"[navigationContentBottom]\"></ng-content></div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.NavigationService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { navigationHeader: [{
                type: ViewChild,
                args: ['navigationHeader', { static: false }]
            }], navigationContentTop: [{
                type: ViewChild,
                args: ['navigationContentTop', { static: false }]
            }], navigationContentBottom: [{
                type: ViewChild,
                args: ['navigationContentBottom', { static: false }]
            }], navigationArea: [{
                type: ViewChild,
                args: ['navigationArea', { static: false }]
            }], navigationAreaScroll: [{
                type: ViewChild,
                args: ['navigationAreaScroll', { static: false }]
            }], navigation: [{
                type: ViewChild,
                args: ['navigation', { static: false }]
            }], id: [{
                type: Input
            }], label: [{
                type: Input
            }], iconLeading: [{
                type: Input
            }], iconTrailing: [{
                type: Input
            }], size: [{
                type: Input
            }], navigationConfig: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,