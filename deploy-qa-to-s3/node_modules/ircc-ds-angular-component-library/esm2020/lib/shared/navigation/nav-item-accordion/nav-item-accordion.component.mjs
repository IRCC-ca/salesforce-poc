import { Input } from '@angular/core';
import { Component } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../navigation.service";
import * as i2 from "@angular/common";
import * as i3 from "../../icon-button/icon-button.component";
import * as i4 from "../nav-item-heading/nav-item-heading.component";
export class navItemAccordionComponent {
    constructor(navEvent) {
        this.navEvent = navEvent;
        this.config = {
            id: '',
            open: false,
            label: '',
            size: 'small',
            type: 'accordion',
            children: [],
            leftPadding: false,
            bold: true
        };
        this.id = '';
        this.label = '';
        this.iconLeading = '';
        this.headerID = '';
        this.buttonIconOpen = {
            id: `${this.config.id}-button`,
            category: 'custom',
            size: this.config?.size,
            icon: {
                class: 'fa-light fa-arrow-right',
                color: 'var(--text-primary)'
            }
        };
        this.buttonIconClose = {
            id: `${this.config.id}-button`,
            category: 'custom',
            size: this.config?.size,
            icon: {
                class: 'fa-light fa-arrow-right',
                color: 'var(--text-primary)'
            }
        };
        this.navObjectChangeSub = new Subscription();
    }
    ngOnInit() {
        // this.navObjectChangeSub = this.navEvent.navObjectChangeObs$.pipe(
        //   filter(item => (item.id === this.config.id && item.type === 'accordion'))).subscribe(response => {
        //     this.config = response as NavigationItemAccordion;
        //   });
        this.id !== '' ? (this.config.id = this.id) : undefined;
        this.open !== undefined ? (this.config.open = this.open) : undefined;
        this.bold !== undefined ? (this.config.bold = this.bold) : undefined;
        if (this.config?.bold != true && this.config?.bold != false) {
            this.config.bold = true;
        }
        this.leftPadding !== undefined
            ? (this.config.leftPadding = this.leftPadding)
            : undefined;
        this.label !== '' ? (this.config.label = this.label) : undefined;
        this.size !== undefined ? (this.config.size = this.size) : undefined;
        this.iconLeading !== ''
            ? (this.config.iconLeading = this.iconLeading)
            : undefined;
        this.headerID = `${this.config.id}_header`;
        this.buttonIconOpen = {
            id: `${this.config.id}_button_open`,
            category: 'custom',
            size: this.config?.size,
            icon: {
                class: 'fa-light fa-chevron-up',
                color: 'var(--text-primary)'
            }
        };
        this.buttonIconClose = {
            id: `${this.config.id}_button_close`,
            category: 'custom',
            size: this.config?.size,
            icon: {
                class: 'fa-light fa-chevron-down',
                color: 'var(--text-primary)'
            }
        };
    }
    openAccordion(event) {
        this.config.open = !this.config.open;
        this.navEvent.navEvent({ id: this.config.id, event: event });
    }
    enterPress(event) {
        this.config.open = !this.config.open;
    }
}
navItemAccordionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: navItemAccordionComponent, deps: [{ token: i1.NavigationService }], target: i0.ɵɵFactoryTarget.Component });
navItemAccordionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: navItemAccordionComponent, selector: "ircc-cl-lib-nav-accordion", inputs: { config: "config", id: "id", open: "open", label: "label", size: "size", iconLeading: "iconLeading", leftPadding: "leftPadding", bold: "bold" }, ngImport: i0, template: "<div\n  [id]=\"config.id\"\n  class=\"lib-nav-item\"\n>\n  <div class=\"accordion-panel\">\n    <div\n      class=\"accordion-nav\"\n      (keydown.enter)=\"enterPress($event)\"\n    >\n      <ircc-cl-lib-nav-header\n        [id]=\"headerID\"\n        [attr.size]=\"config.size\"\n        [size]=\"config.size\"\n        [label]=\"config?.label || ''\"\n        [iconLeading]=\"config?.iconLeading || ''\"\n        [leftPadding]=\"config?.leftPadding\"\n        [bold]=\"config?.bold\"\n      >\n      </ircc-cl-lib-nav-header>\n\n      <ircc-cl-lib-icon-button\n        *ngIf=\"config.open === true\"\n        (clickEvent)=\"openAccordion($event)\"\n        [config]=\"buttonIconOpen\"\n        [attr.size]=\"config.size\"\n        class=\"open\"\n      ></ircc-cl-lib-icon-button>\n      <ircc-cl-lib-icon-button\n        *ngIf=\"config.open === false\"\n        (clickEvent)=\"openAccordion($event)\"\n        [attr.size]=\"config.size\"\n        [config]=\"buttonIconClose\"\n        class=\"close\"\n      ></ircc-cl-lib-icon-button>\n    </div>\n    <div\n      [class]=\"\n        config.open ? 'open accordion-content' : 'close accordion-content'\n      \"\n    >\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.IconButtonComponent, selector: "ircc-cl-lib-icon-button", inputs: ["config", "id", "category", "size", "ariaLabel", "disabled", "icon"], outputs: ["clickEvent"] }, { kind: "component", type: i4.navItemHeadingComponent, selector: "ircc-cl-lib-nav-header", inputs: ["config", "id", "label", "iconLeading", "children", "size", "leftPadding", "bold"] }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: navItemAccordionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-nav-accordion', template: "<div\n  [id]=\"config.id\"\n  class=\"lib-nav-item\"\n>\n  <div class=\"accordion-panel\">\n    <div\n      class=\"accordion-nav\"\n      (keydown.enter)=\"enterPress($event)\"\n    >\n      <ircc-cl-lib-nav-header\n        [id]=\"headerID\"\n        [attr.size]=\"config.size\"\n        [size]=\"config.size\"\n        [label]=\"config?.label || ''\"\n        [iconLeading]=\"config?.iconLeading || ''\"\n        [leftPadding]=\"config?.leftPadding\"\n        [bold]=\"config?.bold\"\n      >\n      </ircc-cl-lib-nav-header>\n\n      <ircc-cl-lib-icon-button\n        *ngIf=\"config.open === true\"\n        (clickEvent)=\"openAccordion($event)\"\n        [config]=\"buttonIconOpen\"\n        [attr.size]=\"config.size\"\n        class=\"open\"\n      ></ircc-cl-lib-icon-button>\n      <ircc-cl-lib-icon-button\n        *ngIf=\"config.open === false\"\n        (clickEvent)=\"openAccordion($event)\"\n        [attr.size]=\"config.size\"\n        [config]=\"buttonIconClose\"\n        class=\"close\"\n      ></ircc-cl-lib-icon-button>\n    </div>\n    <div\n      [class]=\"\n        config.open ? 'open accordion-content' : 'close accordion-content'\n      \"\n    >\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.NavigationService }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], open: [{
                type: Input
            }], label: [{
                type: Input
            }], size: [{
                type: Input
            }], iconLeading: [{
                type: Input
            }], leftPadding: [{
                type: Input
            }], bold: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,