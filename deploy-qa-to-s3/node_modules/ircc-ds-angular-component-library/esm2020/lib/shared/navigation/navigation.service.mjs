//TODO: Add detailed readme listing how this actually works. People will be SOOOO confused.
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class NavigationService {
    constructor() {
        //Used entirely as a workaround for the change detection limitations
        this.itemChangeSubj = new Subject();
        this.itemChangeObs$ = this.itemChangeSubj.asObservable();
        this.navEventSubj = new Subject();
        this.navEventObs$ = this.navEventSubj.asObservable(); //Use this for any events we need propagated up to parents
        this.navConfigSubj = new BehaviorSubject({
            id: '',
            label: '',
            iconLeading: '',
            iconTrailing: '',
            height: '',
            size: 'small',
            scrolling: false,
            marginTop: 0,
            navigationConfig: [],
            childrenPadding: true
        });
        this.navConfigObs$ = this.navConfigSubj.asObservable();
        this.flattenedNavigation = [];
        /**
         * Flatten an object into a simple array
         * @param obj object being flattened
         * @returns flattened array
         */
        this.flatten = (obj) => {
            const stack = [obj];
            let stackB = [];
            while (stack?.length > 0) {
                const currentObj = stack.pop();
                if (!Array.isArray(currentObj)) {
                    stackB.push(currentObj);
                }
                Object.keys(currentObj).forEach((key) => {
                    if (typeof currentObj[key] === 'object' && currentObj[key] !== null) {
                        stack.push(currentObj[key]);
                    }
                });
            }
            return stackB;
        };
        /**
         *
         * @param items flattened array
         * @param key of the key value pair ('id')
         * @param value id of the piece being searched for (update.id)
         * @returns
         */
        this.findByKey = (items, key, value) => {
            let returnItem = {
                id: '',
                label: '',
                type: 'accordion',
                children: []
            };
            returnItem = items.find((element) => element[key] === value) || {
                id: '',
                label: '',
                type: 'accordion',
                children: []
            };
            return returnItem;
        };
        /**
         * Replace the contents of one object with those of another. This is done to keep our
         * memory trick going
         * @param obj1 object being updated
         * @param obj2 values to put in obj1
         */
        this.setNavItemFields = (obj1, obj2) => {
            Object.keys(obj2).forEach((key) => {
                obj1[key] = obj2[key];
            });
        };
    }
    /**
     * Broadcast the config object of the value and flatten the array
     * @param update: INavigationConfig
     */
    setNavConfig(update) {
        this.navConfigSubj.next(update);
        this.flattenedNavigation = this.flatten(update);
    }
    /**
     * General broadcast of an element update
     * @param event
     */
    setNavItem(update) {
        this.setNavItemFields(this.findByKey(this.flattenedNavigation, 'id', update.id), update);
        this.itemChangeSubj.next(update.id); //This is used to get around a change detection problem in the various child components
    }
    /**
     * Broadcast element events
     * @param event: INavItemEvent where id is the id of the component broadcasting and event is the Event
     */
    navEvent(event) {
        this.navEventSubj.next(event);
    }
}
NavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NavigationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NavigationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NavigationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,