import { Component, Input, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class IconComponent {
    constructor() {
        this.config = {};
    }
    ngOnChanges(changes) {
        if (changes['config'] && !changes['config'].firstChange) {
            const change = changes['config'].currentValue;
            const keys = Object.keys(change);
            let spanContent = `<i class='font-icon `;
            keys.includes('FA_keywords')
                ? (spanContent += `${change['FA_keywords']}'`)
                : null;
            spanContent += `></i>`;
            this.iconSpan.nativeElement.innerHTML = spanContent;
        }
        if (changes['size'] && !changes['size'].firstChange)
            this.config.size = this.size;
    }
    ngOnInit() {
        //set config from individual options, if present
        if (this.ariaLabel)
            this.config.ariaLabel = this.ariaLabel;
        if (this.FA_keywords)
            this.config.FA_keywords = this.FA_keywords;
        if (this.size)
            this.config.size = this.size;
        if (this.config.ariaLabel === '') {
            delete this.config.ariaLabel;
        }
    }
}
IconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: IconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: IconComponent, selector: "ircc-cl-lib-icon", inputs: { config: "config", ariaLabel: "ariaLabel", FA_keywords: "FA_keywords", size: "size" }, viewQueries: [{ propertyName: "iconSpan", first: true, predicate: ["iconSpan"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<span\n  class=\"ds-icon-container\"\n  [ngClass]=\"config.size\"\n>\n  <span\n    #iconSpan\n    [attr.aria-hidden]=\"config.ariaLabel ? false : true\"\n    [attr.aria-label]=\"config.ariaLabel ? config.ariaLabel : null\"\n    [attr.role]=\"config.ariaLabel ? 'img' : null\"\n  >\n    <i\n      class=\"font-icon\"\n      [ngClass]=\"config.FA_keywords\"\n    ></i>\n  </span>\n</span>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: IconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-icon', template: "<span\n  class=\"ds-icon-container\"\n  [ngClass]=\"config.size\"\n>\n  <span\n    #iconSpan\n    [attr.aria-hidden]=\"config.ariaLabel ? false : true\"\n    [attr.aria-label]=\"config.ariaLabel ? config.ariaLabel : null\"\n    [attr.role]=\"config.ariaLabel ? 'img' : null\"\n  >\n    <i\n      class=\"font-icon\"\n      [ngClass]=\"config.FA_keywords\"\n    ></i>\n  </span>\n</span>\n" }]
        }], propDecorators: { iconSpan: [{
                type: ViewChild,
                args: ['iconSpan']
            }], config: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], FA_keywords: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvc2hhcmVkL2ljb24vaWNvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvc2hhcmVkL2ljb24vaWNvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFJTCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7OztBQWF2QixNQUFNLE9BQU8sYUFBYTtJQUoxQjtRQU1XLFdBQU0sR0FBZ0IsRUFBRSxDQUFDO0tBK0JuQztJQTFCQyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDOUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxJQUFJLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztnQkFDMUIsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDVCxXQUFXLElBQUksT0FBTyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7U0FDckQ7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXO1lBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVELFFBQVE7UUFDTixnREFBZ0Q7UUFDaEQsSUFBSSxJQUFJLENBQUMsU0FBUztZQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDM0QsSUFBSSxJQUFJLENBQUMsV0FBVztZQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDakUsSUFBSSxJQUFJLENBQUMsSUFBSTtZQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFNUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUM5QjtJQUNILENBQUM7OzJHQWhDVSxhQUFhOytGQUFiLGFBQWEsbVJDckIxQixzWUFnQkE7NEZES2EsYUFBYTtrQkFKekIsU0FBUzsrQkFDRSxrQkFBa0I7OEJBSUwsUUFBUTtzQkFBOUIsU0FBUzt1QkFBQyxVQUFVO2dCQUNaLE1BQU07c0JBQWQsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkluaXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERTU2l6ZXMgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2psLWNvbXBvbmVudHMuY29uc3RhbnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBJSWNvbkNvbmZpZyB7XG4gIGFyaWFMYWJlbD86IHN0cmluZztcbiAgRkFfa2V5d29yZHM/OiBzdHJpbmc7XG4gIHNpemU/OiBrZXlvZiB0eXBlb2YgRFNTaXplcztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXJjYy1jbC1saWItaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuICBAVmlld0NoaWxkKCdpY29uU3BhbicpIGljb25TcGFuITogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgY29uZmlnOiBJSWNvbkNvbmZpZyA9IHt9O1xuICBASW5wdXQoKSBhcmlhTGFiZWw/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIEZBX2tleXdvcmRzPzogc3RyaW5nO1xuICBASW5wdXQoKSBzaXplPzoga2V5b2YgdHlwZW9mIERTU2l6ZXM7XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzWydjb25maWcnXSAmJiAhY2hhbmdlc1snY29uZmlnJ10uZmlyc3RDaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGNoYW5nZSA9IGNoYW5nZXNbJ2NvbmZpZyddLmN1cnJlbnRWYWx1ZTtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjaGFuZ2UpO1xuICAgICAgbGV0IHNwYW5Db250ZW50ID0gYDxpIGNsYXNzPSdmb250LWljb24gYDtcbiAgICAgIGtleXMuaW5jbHVkZXMoJ0ZBX2tleXdvcmRzJylcbiAgICAgICAgPyAoc3BhbkNvbnRlbnQgKz0gYCR7Y2hhbmdlWydGQV9rZXl3b3JkcyddfSdgKVxuICAgICAgICA6IG51bGw7XG4gICAgICBzcGFuQ29udGVudCArPSBgPjwvaT5gO1xuICAgICAgdGhpcy5pY29uU3Bhbi5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IHNwYW5Db250ZW50O1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydzaXplJ10gJiYgIWNoYW5nZXNbJ3NpemUnXS5maXJzdENoYW5nZSlcbiAgICAgIHRoaXMuY29uZmlnLnNpemUgPSB0aGlzLnNpemU7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICAvL3NldCBjb25maWcgZnJvbSBpbmRpdmlkdWFsIG9wdGlvbnMsIGlmIHByZXNlbnRcbiAgICBpZiAodGhpcy5hcmlhTGFiZWwpIHRoaXMuY29uZmlnLmFyaWFMYWJlbCA9IHRoaXMuYXJpYUxhYmVsO1xuICAgIGlmICh0aGlzLkZBX2tleXdvcmRzKSB0aGlzLmNvbmZpZy5GQV9rZXl3b3JkcyA9IHRoaXMuRkFfa2V5d29yZHM7XG4gICAgaWYgKHRoaXMuc2l6ZSkgdGhpcy5jb25maWcuc2l6ZSA9IHRoaXMuc2l6ZTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5hcmlhTGFiZWwgPT09ICcnKSB7XG4gICAgICBkZWxldGUgdGhpcy5jb25maWcuYXJpYUxhYmVsO1xuICAgIH1cbiAgfVxufVxuIiwiPHNwYW5cbiAgY2xhc3M9XCJkcy1pY29uLWNvbnRhaW5lclwiXG4gIFtuZ0NsYXNzXT1cImNvbmZpZy5zaXplXCJcbj5cbiAgPHNwYW5cbiAgICAjaWNvblNwYW5cbiAgICBbYXR0ci5hcmlhLWhpZGRlbl09XCJjb25maWcuYXJpYUxhYmVsID8gZmFsc2UgOiB0cnVlXCJcbiAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImNvbmZpZy5hcmlhTGFiZWwgPyBjb25maWcuYXJpYUxhYmVsIDogbnVsbFwiXG4gICAgW2F0dHIucm9sZV09XCJjb25maWcuYXJpYUxhYmVsID8gJ2ltZycgOiBudWxsXCJcbiAgPlxuICAgIDxpXG4gICAgICBjbGFzcz1cImZvbnQtaWNvblwiXG4gICAgICBbbmdDbGFzc109XCJjb25maWcuRkFfa2V5d29yZHNcIlxuICAgID48L2k+XG4gIDwvc3Bhbj5cbjwvc3Bhbj5cbiJdfQ==