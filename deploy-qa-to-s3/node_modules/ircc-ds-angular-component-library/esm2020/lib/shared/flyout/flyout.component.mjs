import { Component, Input, Output, EventEmitter, HostListener, ViewChildren, QueryList } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/cdk/scrolling";
import * as i4 from "@angular/cdk-experimental/scrolling";
import * as i5 from "../flyout-option/flyout-option.component";
import * as i6 from "../../../shared/pipes/autocomplete.pipe";
export var IFlyoutSelectTypes;
(function (IFlyoutSelectTypes) {
    IFlyoutSelectTypes["single"] = "single";
    IFlyoutSelectTypes["multi"] = "multi";
    IFlyoutSelectTypes["autocomplete"] = "autocomplete";
})(IFlyoutSelectTypes || (IFlyoutSelectTypes = {}));
export const FLYOUT_CURRENT_SELECTED = {
    en: ' currently selected',
    fr: ' actuellement selectionne'
};
export class FlyoutComponent {
    constructor(translate) {
        this.translate = translate;
        this.optionContainers = new QueryList();
        this.config = {
            id: '',
            options: []
        };
        //TODO: Must add the other config parameters
        this.isSelected = new EventEmitter();
        this.selectedIndex = -1;
        this.a11yText = '';
        this.currentSelected = '';
    }
    ngOnInit() {
        if (this.config.type === undefined)
            this.config.type = 'single';
        if (this.config.selected === undefined)
            this.config.selected = '';
        if (this.id)
            this.config.id = this.id;
        if (this.options)
            this.config.options = this.options;
        if (!this.config.options)
            this.config.options = [];
        if (this.disabled)
            this.config.disabled = this.disabled;
        if (this.selection)
            this.config.selection = this.selection;
        if (this.type)
            this.config.type = this.type;
        if (this.size)
            this.config.size = this.size;
        this.setLang(this.translate.currentLang);
        this.translate.onLangChange.subscribe((change) => {
            this.setLang(change.lang);
        });
    }
    calculateContainerHeight() {
        let numberOfItems = this.config.options?.length || 0;
        const itemHeight = 36;
        const visibleItems = 5;
        if (numberOfItems < 2) {
            numberOfItems = 1.5;
        }
        if (numberOfItems && numberOfItems <= visibleItems) {
            return `${itemHeight * numberOfItems}px`;
        }
        return `${itemHeight * visibleItems}px`;
    }
    onClick(event) {
        let target = event.target;
        if (!target.classList.contains('option-contents') &&
            !target.classList.contains('dropdown')) {
            this.isSelected.emit(null);
        }
    }
    onArrowDown(event) {
        event.preventDefault();
        if (this.config.options) {
            let foundClickable = false;
            this.config.options
                .slice(this.selectedIndex + 1)
                .forEach((option, index) => {
                if (!foundClickable && option.clickable !== false) {
                    this.selectedIndex += index + 1;
                    this.highlightIndex(option.id);
                    foundClickable = true;
                }
            });
        }
    }
    onArrowUp(event) {
        event.preventDefault();
        if (this.config.options) {
            let foundClickable = false;
            this.config.options
                .slice(0, this.selectedIndex)
                .reverse()
                .forEach((option, index) => {
                if (!foundClickable && option.clickable !== false) {
                    this.selectedIndex -= index + 1;
                    this.highlightIndex(option.id);
                    foundClickable = true;
                }
            });
            // Ensure selectedIndex does not fall below 0
            this.selectedIndex = Math.max(this.selectedIndex, 0);
        }
    }
    onEnter(event) {
        event.preventDefault();
        //if the index hasn't changes through arrow navigation, emits our event but lets the parent know nothing was selected
        this.selectedIndex != -1
            ? this.optionSelected(this.selectedIndex)
            : this.isSelected.emit(null);
    }
    onHover() {
        // Remove default active state for 1st option when user hover on flyout
        if (this.config.options.length > 0 &&
            this.config.options[0].active === true)
            this.config.options[0].active = false;
    }
    //takes in the active index from HostListeners and sets the config option to active state which triggers styling
    highlightIndex(el_id) {
        if (el_id) {
            this.config.options?.forEach((option) => {
                if (option.id === el_id) {
                    option.active = true;
                    this.optionContainers
                        .toArray()[this.selectedIndex]?.nativeElement?.scrollIntoView({
                        behavior: 'smooth',
                        block: 'end'
                    });
                    console.log('HERE', option.value);
                    this.a11yText = option.value;
                    //updates a11yText to indicate currently selected item if scrolling through flyout again
                    if (option.selected)
                        this.a11yText += this.currentSelected;
                }
                else {
                    option.active = false;
                }
            });
        }
    }
    /**
     * setLang detects changes to the language toggle to serve the correct aria error text
     */
    setLang(lang) {
        lang === 'en' || lang === 'en-US'
            ? (this.currentSelected = FLYOUT_CURRENT_SELECTED.en)
            : (this.currentSelected = FLYOUT_CURRENT_SELECTED.fr);
    }
    //clears all selections by setting the option.selected to false
    clearOptions() {
        this.config?.options?.forEach((option) => {
            option.selected = false;
        });
    }
    //function takes in index value of current active option and selects it
    optionSelected(i) {
        if (this.config.options &&
            !this.config.options[i].selected &&
            this.config.options[i].clickable) {
            //setup for future multi select feature
            this.config.type !== 'multi'
                ? this.clearOptions()
                : /*this.config.selection = [].push(this.config.options[i]);*/ console.log('MULTI');
            this.config.options[i].selected = true;
            //emits the value of the selected index so it's visible to the parent
            this.isSelected.emit(this.config.options[i].value);
        }
    }
}
FlyoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: FlyoutComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
FlyoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: FlyoutComponent, selector: "ircc-cl-lib-flyout", inputs: { config: "config", id: "id", options: "options", disabled: "disabled", selection: "selection", type: "type", size: "size" }, outputs: { isSelected: "isSelected" }, host: { listeners: { "document:click": "onClick($event)", "document:keydown.arrowdown": "onArrowDown($event)", "document:keydown.arrowup": "onArrowUp($event)", "document:keydown.enter": "onEnter($event)", "mouseenter": "onHover()" } }, viewQueries: [{ propertyName: "optionContainers", predicate: ["option"], descendants: true }], ngImport: i0, template: "<div\n  *ngIf=\"\n    config.type !== 'autocomplete' || config.options.length < 50;\n    else auto_flyout\n  \"\n>\n  <div\n    class=\"{{ config?.size }} flyout-container\"\n    #container\n  >\n    <div\n      #option\n      *ngFor=\"let option of config?.options; let index = index\"\n      [ngClass]=\"{\n        'flyout-option-container': option.clickable !== false,\n        'disabled-option': option.disabled === true,\n        selected: option.active\n      }\"\n    >\n      <ircc-cl-lib-flyout-option\n        [config]=\"option\"\n        [value]=\"option.value | autocomplete : config.selected\"\n        [size]=\"option.size\"\n        (click)=\"optionSelected(index)\"\n        [id]=\"option.id + '_option_' + (index + 1)\"\n      ></ircc-cl-lib-flyout-option>\n    </div>\n  </div>\n</div>\n\n<ng-template #auto_flyout>\n  <div class=\"{{ config?.size }} flyout-container\">\n    <cdk-virtual-scroll-viewport\n      autosize\n      style=\"height: 100%\"\n      minBufferPx=\"5\"\n      maxBufferPx=\"56\"\n      class=\"example-viewport\"\n      #container\n      [style.height]=\"calculateContainerHeight()\"\n    >\n      <div\n        *cdkVirtualFor=\"\n          let option of config?.options;\n          let index = index;\n          templateCacheSize: 0\n        \"\n        class=\"example-item\"\n        [ngClass]=\"{\n          'flyout-option-container': option.clickable !== false,\n          'disabled-option': option.disabled === true,\n          selected: option.active\n        }\"\n      >\n        <ircc-cl-lib-flyout-option\n          [config]=\"option\"\n          [value]=\"option.value | autocomplete : config.selected\"\n          [size]=\"option.size\"\n          (click)=\"optionSelected(index)\"\n          [id]=\"option.id + '_option_' + (index + 1)\"\n        ></ircc-cl-lib-flyout-option>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</ng-template>\n\n<ng-template\n  #options\n  let-config=\"config\"\n  let-index=\"index\"\n>\n  <ircc-cl-lib-flyout-option\n    [config]=\"config\"\n    [value]=\"config.value | autocomplete : this.config.selected\"\n    [size]=\"config.size\"\n    (click)=\"optionSelected(index)\"\n    [id]=\"config.id + '_option_' + (index + 1)\"\n  ></ircc-cl-lib-flyout-option>\n</ng-template>\n<span\n  id=\"sr\"\n  class=\"sr-only\"\n  aria-live=\"polite\"\n  >{{ a11yText }}{{ currentSelected }}</span\n>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { kind: "component", type: i3.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { kind: "directive", type: i4.CdkAutoSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[autosize]", inputs: ["minBufferPx", "maxBufferPx"] }, { kind: "component", type: i5.FlyoutOptionComponent, selector: "ircc-cl-lib-flyout-option", inputs: ["config", "id", "size", "value", "selected", "active", "disabled", "type", "clickable"] }, { kind: "pipe", type: i6.autocompletePipe, name: "autocomplete" }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: FlyoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-flyout', template: "<div\n  *ngIf=\"\n    config.type !== 'autocomplete' || config.options.length < 50;\n    else auto_flyout\n  \"\n>\n  <div\n    class=\"{{ config?.size }} flyout-container\"\n    #container\n  >\n    <div\n      #option\n      *ngFor=\"let option of config?.options; let index = index\"\n      [ngClass]=\"{\n        'flyout-option-container': option.clickable !== false,\n        'disabled-option': option.disabled === true,\n        selected: option.active\n      }\"\n    >\n      <ircc-cl-lib-flyout-option\n        [config]=\"option\"\n        [value]=\"option.value | autocomplete : config.selected\"\n        [size]=\"option.size\"\n        (click)=\"optionSelected(index)\"\n        [id]=\"option.id + '_option_' + (index + 1)\"\n      ></ircc-cl-lib-flyout-option>\n    </div>\n  </div>\n</div>\n\n<ng-template #auto_flyout>\n  <div class=\"{{ config?.size }} flyout-container\">\n    <cdk-virtual-scroll-viewport\n      autosize\n      style=\"height: 100%\"\n      minBufferPx=\"5\"\n      maxBufferPx=\"56\"\n      class=\"example-viewport\"\n      #container\n      [style.height]=\"calculateContainerHeight()\"\n    >\n      <div\n        *cdkVirtualFor=\"\n          let option of config?.options;\n          let index = index;\n          templateCacheSize: 0\n        \"\n        class=\"example-item\"\n        [ngClass]=\"{\n          'flyout-option-container': option.clickable !== false,\n          'disabled-option': option.disabled === true,\n          selected: option.active\n        }\"\n      >\n        <ircc-cl-lib-flyout-option\n          [config]=\"option\"\n          [value]=\"option.value | autocomplete : config.selected\"\n          [size]=\"option.size\"\n          (click)=\"optionSelected(index)\"\n          [id]=\"option.id + '_option_' + (index + 1)\"\n        ></ircc-cl-lib-flyout-option>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</ng-template>\n\n<ng-template\n  #options\n  let-config=\"config\"\n  let-index=\"index\"\n>\n  <ircc-cl-lib-flyout-option\n    [config]=\"config\"\n    [value]=\"config.value | autocomplete : this.config.selected\"\n    [size]=\"config.size\"\n    (click)=\"optionSelected(index)\"\n    [id]=\"config.id + '_option_' + (index + 1)\"\n  ></ircc-cl-lib-flyout-option>\n</ng-template>\n<span\n  id=\"sr\"\n  class=\"sr-only\"\n  aria-live=\"polite\"\n  >{{ a11yText }}{{ currentSelected }}</span\n>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { optionContainers: [{
                type: ViewChildren,
                args: ['option']
            }], config: [{
                type: Input
            }], id: [{
                type: Input
            }], options: [{
                type: Input
            }], disabled: [{
                type: Input
            }], selection: [{
                type: Input
            }], type: [{
                type: Input
            }], size: [{
                type: Input
            }], isSelected: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], onArrowDown: [{
                type: HostListener,
                args: ['document:keydown.arrowdown', ['$event']]
            }], onArrowUp: [{
                type: HostListener,
                args: ['document:keydown.arrowup', ['$event']]
            }], onEnter: [{
                type: HostListener,
                args: ['document:keydown.enter', ['$event']]
            }], onHover: [{
                type: HostListener,
                args: ['mouseenter']
            }] } });
//# sourceMappingURL=data:application/json;base64,