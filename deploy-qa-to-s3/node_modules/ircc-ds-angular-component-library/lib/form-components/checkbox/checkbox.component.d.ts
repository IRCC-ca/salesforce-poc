import { OnChanges, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormControlStatus, FormGroup } from '@angular/forms';
import { IErrorPairs } from '../../../shared/interfaces/component-configs';
import { DSSizes } from '../../../shared/constants/jl-components.constants';
import { IErrorIDs, StandAloneFunctions } from '../../../shared/functions/stand-alone.functions';
import { ILabelConfig, ILabelIconConfig } from '../../shared/label/label.component';
import { TranslateService } from '@ngx-translate/core';
import { MultiCheckboxService } from '../multi-checkbox/multi-checkbox.service';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export interface ICheckBoxComponentConfig {
    formGroup: FormGroup;
    label?: string;
    required?: boolean;
    size?: keyof typeof DSSizes | DSSizes;
    mixed?: boolean;
    inlineLabel?: string;
    inlineLabelBold?: boolean;
    id: string;
    hint?: string;
    desc?: string;
    errorMessages?: IErrorPairs[];
    labelIconConfig?: ILabelIconConfig;
}
export declare class CheckboxComponent implements ControlValueAccessor, OnInit, OnChanges {
    standAloneFunctions: StandAloneFunctions;
    private translate;
    private multicheckboxService;
    formGroupEmpty: FormGroup;
    configSub?: Subscription;
    config: ICheckBoxComponentConfig;
    formGroup: FormGroup<any>;
    id: string;
    label?: string;
    required?: boolean;
    size?: keyof typeof DSSizes | DSSizes;
    mixed?: boolean;
    inlineLabel?: string;
    inlineLabelBold?: boolean;
    hint?: string;
    desc?: string;
    errorMessages?: IErrorPairs[];
    isDisabled: boolean;
    errorIds: IErrorIDs[];
    formControl?: AbstractControl;
    labelConfig: ILabelConfig;
    touched: boolean;
    errorAria: string;
    errorStubText: string;
    currentStatus: FormControlStatus;
    currentTouch: boolean;
    constructor(standAloneFunctions: StandAloneFunctions, translate: TranslateService, multicheckboxService: MultiCheckboxService);
    onTouch: () => void;
    onChange: (value: string) => void;
    changeValue(event: any): void;
    writeValue(value: string): void;
    registerOnChange(onChange: any): void;
    registerOnTouched(onTouched: any): void;
    /**
     * This is used automatically by the parent formControl. It is used in the template to set the label to disabled
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    setStatus(): void;
    ngAfterViewInit(): void;
    toggleDisabledState(): void;
    ngOnChanges(): void;
    /**
     * Get the aria error text for the label
     */
    getAriaErrorText(): void;
    /**
     * Set a boolean representing the touched state to true and trigger getAriaErrorText()
     */
    onTouchedLabel(): void;
    setLang(lang: string): void;
    /**
     * Return error state from FormGroup, must be touched & invalid
     */
    get errorState(): boolean;
    clickEvent(): void;
    ariaAccess(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CheckboxComponent, "ircc-cl-lib-checkbox", never, { "config": "config"; "formGroup": "formGroup"; "id": "id"; "label": "label"; "required": "required"; "size": "size"; "mixed": "mixed"; "inlineLabel": "inlineLabel"; "inlineLabelBold": "inlineLabelBold"; "hint": "hint"; "desc": "desc"; "errorMessages": "errorMessages"; }, {}, never, never, false>;
}
