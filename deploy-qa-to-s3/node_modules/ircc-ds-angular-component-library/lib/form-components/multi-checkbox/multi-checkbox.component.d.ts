import { OnInit } from '@angular/core';
import { FormControlStatus, FormGroup } from '@angular/forms';
import { Subscription } from 'rxjs';
import { DSSizes, ICheckBoxComponentConfig, ILabelConfig, MultiCheckboxService } from '../../../public-api';
import { IErrorIDs, StandAloneFunctions } from '../../../shared/functions/stand-alone.functions';
import * as i0 from "@angular/core";
export interface IErrorPairsMultiCheckBox {
    id?: string;
    key: string;
    errorLOV: string;
}
export interface IMultiCheckboxConfig {
    id: string;
    label: ILabelConfig;
    parent?: ICheckBoxComponentConfig;
    children?: ICheckBoxComponentConfig[];
    errorMessages: IErrorPairsMultiCheckBox[];
}
export declare class MultiCheckboxComponent implements OnInit {
    private multiCheckboxService;
    standAloneFunctions: StandAloneFunctions;
    form: FormGroup;
    configSub?: Subscription;
    errorSub?: Subscription;
    errorIds: IErrorIDs[];
    config: IMultiCheckboxConfig;
    id: string;
    parent?: ICheckBoxComponentConfig;
    children?: ICheckBoxComponentConfig[];
    errorMessages?: IErrorPairsMultiCheckBox[];
    /**
     * Accumulates all the errors on parents and children checkboxes
     * @type IErrorPairsMultiCheckBox[]
     */
    errorMessagesAccumulator: IErrorPairsMultiCheckBox[];
    /**
     * Accumulates unique error types and used in the frontend to display
     * @type IErrorPairsMultiCheckBox[]
     */
    errorMessagesAccumulatorUniqueType: IErrorPairsMultiCheckBox[];
    disabledStatus: boolean;
    groupCheckbox: boolean;
    get size(): keyof typeof DSSizes;
    constructor(multiCheckboxService: MultiCheckboxService, standAloneFunctions: StandAloneFunctions);
    ngOnInit(): void;
    checkErrorsSubscription(): void;
    /**
     * Will check the status of a formcontrol.  If the control is not in a valid status, it will loop through the errors
     * and add them to this.errorMessages.
     * @param value Status of the formcontrol
     * @param group - Formgroup to be checked
     * @param id - ID of the control that is being checked for error in the formgroup
     */
    checkError(value: FormControlStatus | undefined, group: FormGroup, id: string): void;
    /**
     * Will loop through the errors in the variable errorMessages.
     * It will then add a copy in errorMessagesAccumulator for each unique error type.
     * THe first error in errorMessagesAccumulator will get _error0 appended to it's ID to display the icon
     */
    filterErrorList(): void;
    isValid(checkbox: ICheckBoxComponentConfig): boolean;
    removeResponseFromError(response: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MultiCheckboxComponent, "ircc-cl-lib-multi-checkbox", never, { "config": "config"; "id": "id"; "parent": "parent"; "children": "children"; "errorMessages": "errorMessages"; }, {}, never, never, false>;
}
